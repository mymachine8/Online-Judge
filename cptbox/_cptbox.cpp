/* Generated by Cython 0.23.4 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_23_4"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
#define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__cptbox___cptbox
#define __PYX_HAVE_API__cptbox___cptbox
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "signal.h"
#include "sys/types.h"
#include "unistd.h"
#include "sys/time.h"
#include "sys/resource.h"
#include "ptbox.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "dirent.h"
#include "sys/ptrace.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "cptbox/_cptbox.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_6cptbox_7_cptbox_Debugger;
struct __pyx_obj_6cptbox_7_cptbox_Process;

/* "libc/signal.pxd":3
 * # 7.14 Signal handling <signal.h>
 * 
 * ctypedef void (*sighandler_t)(int SIGNUM) nogil             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "signal.h" nogil:
 */
typedef void (*__pyx_t_4libc_6signal_sighandler_t)(int);
struct __pyx_t_6cptbox_7_cptbox_child_config;
struct __pyx_opt_args_6cptbox_7_cptbox_7Process__spawn;

/* "cptbox/_cptbox.pyx":96
 * SYSCALL_COUNT = MAX_SYSCALL
 * 
 * cdef struct child_config:             # <<<<<<<<<<<<<<
 *     unsigned long memory # affects only sbrk heap
 *     unsigned long address_space # affects sbrk and mmap but not all address space is used memory
 */
struct __pyx_t_6cptbox_7_cptbox_child_config {
  unsigned long memory;
  unsigned long address_space;
  unsigned int cpu_time;
  int nproc;
  char *file;
  char *dir;
  char **argv;
  char **envp;
  int stdin;
  int stdout;
  int stderr;
  int max_fd;
  int *fds;
};

/* "cptbox/_cptbox.pyx":400
 *         pass
 * 
 *     cpdef _spawn(self, file, args, env=(), chdir='', fds=None):             # <<<<<<<<<<<<<<
 *         cdef child_config config
 *         config.address_space = self._child_address
 */
struct __pyx_opt_args_6cptbox_7_cptbox_7Process__spawn {
  int __pyx_n;
  PyObject *env;
  PyObject *chdir;
  PyObject *fds;
};

/* "cptbox/_cptbox.pyx":205
 * 
 * 
 * cdef class Debugger:             # <<<<<<<<<<<<<<
 *     cdef pt_debugger *thisptr
 *     cdef object on_return_callback
 */
struct __pyx_obj_6cptbox_7_cptbox_Debugger {
  PyObject_HEAD
  struct __pyx_vtabstruct_6cptbox_7_cptbox_Debugger *__pyx_vtab;
  pt_debugger *thisptr;
  PyObject *on_return_callback;
  int _getpid_syscall;
};


/* "cptbox/_cptbox.pyx":338
 * 
 * 
 * cdef class Process:             # <<<<<<<<<<<<<<
 *     cdef pt_debugger *_debugger
 *     cdef pt_process *process
 */
struct __pyx_obj_6cptbox_7_cptbox_Process {
  PyObject_HEAD
  struct __pyx_vtabstruct_6cptbox_7_cptbox_Process *__pyx_vtab;
  pt_debugger *_debugger;
  pt_process *process;
  struct __pyx_obj_6cptbox_7_cptbox_Debugger *debugger;
  int _exited;
  int _exitcode;
  int _child_stdin;
  int _child_stdout;
  int _child_stderr;
  unsigned long _child_memory;
  unsigned long _child_address;
  unsigned int _cpu_time;
  int _nproc;
  unsigned long _max_memory;
};



/* "cptbox/_cptbox.pyx":205
 * 
 * 
 * cdef class Debugger:             # <<<<<<<<<<<<<<
 *     cdef pt_debugger *thisptr
 *     cdef object on_return_callback
 */

struct __pyx_vtabstruct_6cptbox_7_cptbox_Debugger {
  PyObject *(*_on_return)(struct __pyx_obj_6cptbox_7_cptbox_Debugger *, int);
};
static struct __pyx_vtabstruct_6cptbox_7_cptbox_Debugger *__pyx_vtabptr_6cptbox_7_cptbox_Debugger;


/* "cptbox/_cptbox.pyx":338
 * 
 * 
 * cdef class Process:             # <<<<<<<<<<<<<<
 *     cdef pt_debugger *_debugger
 *     cdef pt_process *process
 */

struct __pyx_vtabstruct_6cptbox_7_cptbox_Process {
  int (*_syscall_handler)(struct __pyx_obj_6cptbox_7_cptbox_Process *, int);
  int (*_event_handler)(struct __pyx_obj_6cptbox_7_cptbox_Process *, int, unsigned long);
  PyObject *(*_handler)(struct __pyx_obj_6cptbox_7_cptbox_Process *, PyObject *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*_protection_fault)(struct __pyx_obj_6cptbox_7_cptbox_Process *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*_cpu_time_exceeded)(struct __pyx_obj_6cptbox_7_cptbox_Process *, int __pyx_skip_dispatch);
  PyObject *(*_spawn)(struct __pyx_obj_6cptbox_7_cptbox_Process *, PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6cptbox_7_cptbox_7Process__spawn *__pyx_optional_args);
  PyObject *(*_monitor)(struct __pyx_obj_6cptbox_7_cptbox_Process *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6cptbox_7_cptbox_Process *__pyx_vtabptr_6cptbox_7_cptbox_Process;

/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

static int __Pyx_SetVtable(PyObject *dict, void *vtable);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE pid_t __Pyx_PyInt_As_pid_t(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_As_unsigned_long(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_long(unsigned long value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_pid_t(pid_t value);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

static int __Pyx_check_binary_version(void);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_6cptbox_7_cptbox_8Debugger__on_return(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, CYTHON_UNUSED int __pyx_v_syscall); /* proto*/
static int __pyx_f_6cptbox_7_cptbox_7Process__syscall_handler(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, int __pyx_v_syscall); /* proto*/
static int __pyx_f_6cptbox_7_cptbox_7Process__event_handler(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, int __pyx_v_event, unsigned long __pyx_v_param); /* proto*/
static PyObject *__pyx_f_6cptbox_7_cptbox_7Process__handler(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_syscall, PyObject *__pyx_v_handler, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_6cptbox_7_cptbox_7Process__protection_fault(CYTHON_UNUSED struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_syscall, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_6cptbox_7_cptbox_7Process__cpu_time_exceeded(CYTHON_UNUSED struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_6cptbox_7_cptbox_7Process__spawn(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_file, PyObject *__pyx_v_args, int __pyx_skip_dispatch, struct __pyx_opt_args_6cptbox_7_cptbox_7Process__spawn *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_6cptbox_7_cptbox_7Process__monitor(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libc.signal' */

/* Module declarations from 'posix.types' */

/* Module declarations from 'posix.unistd' */

/* Module declarations from 'posix.signal' */

/* Module declarations from 'posix.time' */

/* Module declarations from 'posix.resource' */

/* Module declarations from 'cptbox._cptbox' */
static PyTypeObject *__pyx_ptype_6cptbox_7_cptbox_Debugger = 0;
static PyTypeObject *__pyx_ptype_6cptbox_7_cptbox_Process = 0;
static int __pyx_f_6cptbox_7_cptbox_pt_child(void *); /*proto*/
static int __pyx_f_6cptbox_7_cptbox_pt_syscall_handler(void *, int); /*proto*/
static void __pyx_f_6cptbox_7_cptbox_pt_syscall_return_handler(void *, int); /*proto*/
static int __pyx_f_6cptbox_7_cptbox_pt_event_handler(void *, int, unsigned long); /*proto*/
static char **__pyx_f_6cptbox_7_cptbox_alloc_string_array(PyObject *); /*proto*/
static unsigned long __pyx_f_6cptbox_7_cptbox_get_memory(pid_t, int __pyx_skip_dispatch); /*proto*/
#define __Pyx_MODULE_NAME "cptbox._cptbox"
int __pyx_module_is_main_cptbox___cptbox = 0;

/* Implementation of 'cptbox._cptbox' */
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_RuntimeError;
static char __pyx_k_r[] = "r";
static char __pyx_k__2[] = "";
static char __pyx_k_end[] = "end";
static char __pyx_k_env[] = "env";
static char __pyx_k_fds[] = "fds";
static char __pyx_k_sys[] = "sys";
static char __pyx_k_args[] = "args";
static char __pyx_k_file[] = "file";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_VmHWM[] = "VmHWM:";
static char __pyx_k_chdir[] = "chdir";
static char __pyx_k_print[] = "print";
static char __pyx_k_range[] = "range";
static char __pyx_k_spawn[] = "_spawn";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_stderr[] = "stderr";
static char __pyx_k_xrange[] = "xrange";
static char __pyx_k_bitness[] = "bitness";
static char __pyx_k_handler[] = "_handler";
static char __pyx_k_monitor[] = "_monitor";
static char __pyx_k_syscall[] = "syscall";
static char __pyx_k_callback[] = "_callback";
static char __pyx_k_enumerate[] = "enumerate";
static char __pyx_k_handler_2[] = "handler";
static char __pyx_k_ValueError[] = "ValueError";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_RuntimeError[] = "RuntimeError";
static char __pyx_k_proc_self_fd[] = "/proc/self/fd";
static char __pyx_k_SYSCALL_COUNT[] = "SYSCALL_COUNT";
static char __pyx_k_proc_d_status[] = "/proc/%d/status";
static char __pyx_k_Invalid_bitness[] = "Invalid bitness";
static char __pyx_k_SIGXCPU_in_child[] = "SIGXCPU in child";
static char __pyx_k_protection_fault[] = "_protection_fault";
static char __pyx_k_cpu_time_exceeded[] = "_cpu_time_exceeded";
static char __pyx_k_Failed_to_spawn_child[] = "Failed to spawn child";
static PyObject *__pyx_kp_s_Failed_to_spawn_child;
static PyObject *__pyx_kp_s_Invalid_bitness;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_kp_s_SIGXCPU_in_child;
static PyObject *__pyx_n_s_SYSCALL_COUNT;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s__2;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_bitness;
static PyObject *__pyx_n_s_callback;
static PyObject *__pyx_n_s_chdir;
static PyObject *__pyx_n_s_cpu_time_exceeded;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_env;
static PyObject *__pyx_n_s_fds;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_handler;
static PyObject *__pyx_n_s_handler_2;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_monitor;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_protection_fault;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_spawn;
static PyObject *__pyx_n_s_stderr;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_syscall;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_pf_6cptbox_7_cptbox_get_memory(CYTHON_UNUSED PyObject *__pyx_self, pid_t __pyx_v_pid); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_14getpid_syscall___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_7syscall___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_6cptbox_7_cptbox_8Debugger_7syscall_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_6result___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_6cptbox_7_cptbox_8Debugger_6result_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_7uresult___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_6cptbox_7_cptbox_8Debugger_7uresult_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_4arg0___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_6cptbox_7_cptbox_8Debugger_4arg0_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_4arg1___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_6cptbox_7_cptbox_8Debugger_4arg1_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_4arg2___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_6cptbox_7_cptbox_8Debugger_4arg2_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_4arg3___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_6cptbox_7_cptbox_8Debugger_4arg3_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_4arg4___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_6cptbox_7_cptbox_8Debugger_4arg4_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_4arg5___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_6cptbox_7_cptbox_8Debugger_4arg5_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg0___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg0_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg1___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg1_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg2___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg2_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg3___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg3_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg4___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg4_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg5___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg5_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_readstr(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, unsigned long __pyx_v_address); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_3pid___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_2on_return(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_callback); /* proto */
static int __pyx_pf_6cptbox_7_cptbox_7Process___cinit__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, int __pyx_v_bitness, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static void __pyx_pf_6cptbox_7_cptbox_7Process_2__dealloc__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_4_callback(CYTHON_UNUSED struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_syscall); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_6_handler(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_syscall, PyObject *__pyx_v_handler); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_8_protection_fault(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_syscall); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_10_cpu_time_exceeded(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_12_spawn(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_file, PyObject *__pyx_v_args, PyObject *__pyx_v_env, PyObject *__pyx_v_chdir, PyObject *__pyx_v_fds); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_14_monitor(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_3pid___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_14execution_time___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_8cpu_time___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_10max_memory___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_10returncode___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_8debugger___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static int __pyx_pf_6cptbox_7_cptbox_7Process_8debugger_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6cptbox_7_cptbox_7Process_8debugger_4__del__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_7_exited___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_9_exitcode___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_12_child_stdin___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static int __pyx_pf_6cptbox_7_cptbox_7Process_12_child_stdin_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_13_child_stdout___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static int __pyx_pf_6cptbox_7_cptbox_7Process_13_child_stdout_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_13_child_stderr___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static int __pyx_pf_6cptbox_7_cptbox_7Process_13_child_stderr_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_13_child_memory___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static int __pyx_pf_6cptbox_7_cptbox_7Process_13_child_memory_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_14_child_address___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static int __pyx_pf_6cptbox_7_cptbox_7Process_14_child_address_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_9_cpu_time___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static int __pyx_pf_6cptbox_7_cptbox_7Process_9_cpu_time_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_6_nproc___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static int __pyx_pf_6cptbox_7_cptbox_7Process_6_nproc_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_tp_new_6cptbox_7_cptbox_Debugger(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6cptbox_7_cptbox_Process(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__3;

/* "cptbox/_cptbox.pyx":111
 *     int *fds
 * 
 * cdef int pt_child(void *context) nogil:             # <<<<<<<<<<<<<<
 *     cdef child_config *config = <child_config*> context
 *     cdef DIR *d = opendir('/proc/self/fd')
 */

static int __pyx_f_6cptbox_7_cptbox_pt_child(void *__pyx_v_context) {
  struct __pyx_t_6cptbox_7_cptbox_child_config *__pyx_v_config;
  DIR *__pyx_v_d;
  struct dirent *__pyx_v_dir;
  struct rlimit __pyx_v_limit;
  int __pyx_v_i;
  int __pyx_v_fd;
  int __pyx_r;
  int __pyx_t_1;
  unsigned long __pyx_t_2;
  unsigned int __pyx_t_3;
  int __pyx_t_4;
  long __pyx_t_5;

  /* "cptbox/_cptbox.pyx":112
 * 
 * cdef int pt_child(void *context) nogil:
 *     cdef child_config *config = <child_config*> context             # <<<<<<<<<<<<<<
 *     cdef DIR *d = opendir('/proc/self/fd')
 *     cdef dirent *dir
 */
  __pyx_v_config = ((struct __pyx_t_6cptbox_7_cptbox_child_config *)__pyx_v_context);

  /* "cptbox/_cptbox.pyx":113
 * cdef int pt_child(void *context) nogil:
 *     cdef child_config *config = <child_config*> context
 *     cdef DIR *d = opendir('/proc/self/fd')             # <<<<<<<<<<<<<<
 *     cdef dirent *dir
 *     cdef rlimit limit
 */
  __pyx_v_d = opendir(__pyx_k_proc_self_fd);

  /* "cptbox/_cptbox.pyx":118
 *     cdef int i
 * 
 *     if config.address_space:             # <<<<<<<<<<<<<<
 *         limit.rlim_cur = limit.rlim_max = config.address_space
 *         setrlimit(RLIMIT_AS, &limit)
 */
  __pyx_t_1 = (__pyx_v_config->address_space != 0);
  if (__pyx_t_1) {

    /* "cptbox/_cptbox.pyx":119
 * 
 *     if config.address_space:
 *         limit.rlim_cur = limit.rlim_max = config.address_space             # <<<<<<<<<<<<<<
 *         setrlimit(RLIMIT_AS, &limit)
 * 
 */
    __pyx_t_2 = __pyx_v_config->address_space;
    __pyx_v_limit.rlim_cur = __pyx_t_2;
    __pyx_v_limit.rlim_max = __pyx_t_2;

    /* "cptbox/_cptbox.pyx":120
 *     if config.address_space:
 *         limit.rlim_cur = limit.rlim_max = config.address_space
 *         setrlimit(RLIMIT_AS, &limit)             # <<<<<<<<<<<<<<
 * 
 *     if config.memory:
 */
    setrlimit(RLIMIT_AS, (&__pyx_v_limit));

    /* "cptbox/_cptbox.pyx":118
 *     cdef int i
 * 
 *     if config.address_space:             # <<<<<<<<<<<<<<
 *         limit.rlim_cur = limit.rlim_max = config.address_space
 *         setrlimit(RLIMIT_AS, &limit)
 */
  }

  /* "cptbox/_cptbox.pyx":122
 *         setrlimit(RLIMIT_AS, &limit)
 * 
 *     if config.memory:             # <<<<<<<<<<<<<<
 *         limit.rlim_cur = limit.rlim_max = config.memory
 *         setrlimit(RLIMIT_DATA, &limit)
 */
  __pyx_t_1 = (__pyx_v_config->memory != 0);
  if (__pyx_t_1) {

    /* "cptbox/_cptbox.pyx":123
 * 
 *     if config.memory:
 *         limit.rlim_cur = limit.rlim_max = config.memory             # <<<<<<<<<<<<<<
 *         setrlimit(RLIMIT_DATA, &limit)
 * 
 */
    __pyx_t_2 = __pyx_v_config->memory;
    __pyx_v_limit.rlim_cur = __pyx_t_2;
    __pyx_v_limit.rlim_max = __pyx_t_2;

    /* "cptbox/_cptbox.pyx":124
 *     if config.memory:
 *         limit.rlim_cur = limit.rlim_max = config.memory
 *         setrlimit(RLIMIT_DATA, &limit)             # <<<<<<<<<<<<<<
 * 
 *     if config.cpu_time:
 */
    setrlimit(RLIMIT_DATA, (&__pyx_v_limit));

    /* "cptbox/_cptbox.pyx":122
 *         setrlimit(RLIMIT_AS, &limit)
 * 
 *     if config.memory:             # <<<<<<<<<<<<<<
 *         limit.rlim_cur = limit.rlim_max = config.memory
 *         setrlimit(RLIMIT_DATA, &limit)
 */
  }

  /* "cptbox/_cptbox.pyx":126
 *         setrlimit(RLIMIT_DATA, &limit)
 * 
 *     if config.cpu_time:             # <<<<<<<<<<<<<<
 *         limit.rlim_cur = config.cpu_time
 *         limit.rlim_max = config.cpu_time + 1
 */
  __pyx_t_1 = (__pyx_v_config->cpu_time != 0);
  if (__pyx_t_1) {

    /* "cptbox/_cptbox.pyx":127
 * 
 *     if config.cpu_time:
 *         limit.rlim_cur = config.cpu_time             # <<<<<<<<<<<<<<
 *         limit.rlim_max = config.cpu_time + 1
 *         setrlimit(RLIMIT_CPU, &limit)
 */
    __pyx_t_3 = __pyx_v_config->cpu_time;
    __pyx_v_limit.rlim_cur = __pyx_t_3;

    /* "cptbox/_cptbox.pyx":128
 *     if config.cpu_time:
 *         limit.rlim_cur = config.cpu_time
 *         limit.rlim_max = config.cpu_time + 1             # <<<<<<<<<<<<<<
 *         setrlimit(RLIMIT_CPU, &limit)
 * 
 */
    __pyx_v_limit.rlim_max = (__pyx_v_config->cpu_time + 1);

    /* "cptbox/_cptbox.pyx":129
 *         limit.rlim_cur = config.cpu_time
 *         limit.rlim_max = config.cpu_time + 1
 *         setrlimit(RLIMIT_CPU, &limit)             # <<<<<<<<<<<<<<
 * 
 *     if config.nproc >= 0:
 */
    setrlimit(RLIMIT_CPU, (&__pyx_v_limit));

    /* "cptbox/_cptbox.pyx":126
 *         setrlimit(RLIMIT_DATA, &limit)
 * 
 *     if config.cpu_time:             # <<<<<<<<<<<<<<
 *         limit.rlim_cur = config.cpu_time
 *         limit.rlim_max = config.cpu_time + 1
 */
  }

  /* "cptbox/_cptbox.pyx":131
 *         setrlimit(RLIMIT_CPU, &limit)
 * 
 *     if config.nproc >= 0:             # <<<<<<<<<<<<<<
 *         limit.rlim_cur = limit.rlim_max = config.nproc
 *         setrlimit(RLIMIT_NPROC, &limit)
 */
  __pyx_t_1 = ((__pyx_v_config->nproc >= 0) != 0);
  if (__pyx_t_1) {

    /* "cptbox/_cptbox.pyx":132
 * 
 *     if config.nproc >= 0:
 *         limit.rlim_cur = limit.rlim_max = config.nproc             # <<<<<<<<<<<<<<
 *         setrlimit(RLIMIT_NPROC, &limit)
 * 
 */
    __pyx_t_4 = __pyx_v_config->nproc;
    __pyx_v_limit.rlim_cur = __pyx_t_4;
    __pyx_v_limit.rlim_max = __pyx_t_4;

    /* "cptbox/_cptbox.pyx":133
 *     if config.nproc >= 0:
 *         limit.rlim_cur = limit.rlim_max = config.nproc
 *         setrlimit(RLIMIT_NPROC, &limit)             # <<<<<<<<<<<<<<
 * 
 *     if config.dir[0]:
 */
    setrlimit(RLIMIT_NPROC, (&__pyx_v_limit));

    /* "cptbox/_cptbox.pyx":131
 *         setrlimit(RLIMIT_CPU, &limit)
 * 
 *     if config.nproc >= 0:             # <<<<<<<<<<<<<<
 *         limit.rlim_cur = limit.rlim_max = config.nproc
 *         setrlimit(RLIMIT_NPROC, &limit)
 */
  }

  /* "cptbox/_cptbox.pyx":135
 *         setrlimit(RLIMIT_NPROC, &limit)
 * 
 *     if config.dir[0]:             # <<<<<<<<<<<<<<
 *         chdir(config.dir)
 * 
 */
  __pyx_t_1 = ((__pyx_v_config->dir[0]) != 0);
  if (__pyx_t_1) {

    /* "cptbox/_cptbox.pyx":136
 * 
 *     if config.dir[0]:
 *         chdir(config.dir)             # <<<<<<<<<<<<<<
 * 
 *     limit.rlim_cur = limit.rlim_max = RLIM_INFINITY
 */
    chdir(__pyx_v_config->dir);

    /* "cptbox/_cptbox.pyx":135
 *         setrlimit(RLIMIT_NPROC, &limit)
 * 
 *     if config.dir[0]:             # <<<<<<<<<<<<<<
 *         chdir(config.dir)
 * 
 */
  }

  /* "cptbox/_cptbox.pyx":138
 *         chdir(config.dir)
 * 
 *     limit.rlim_cur = limit.rlim_max = RLIM_INFINITY             # <<<<<<<<<<<<<<
 *     setrlimit(RLIMIT_STACK, &limit)
 *     limit.rlim_cur = limit.rlim_max = 0
 */
  __pyx_v_limit.rlim_cur = RLIM_INFINITY;
  __pyx_v_limit.rlim_max = RLIM_INFINITY;

  /* "cptbox/_cptbox.pyx":139
 * 
 *     limit.rlim_cur = limit.rlim_max = RLIM_INFINITY
 *     setrlimit(RLIMIT_STACK, &limit)             # <<<<<<<<<<<<<<
 *     limit.rlim_cur = limit.rlim_max = 0
 *     setrlimit(RLIMIT_CORE, &limit)
 */
  setrlimit(RLIMIT_STACK, (&__pyx_v_limit));

  /* "cptbox/_cptbox.pyx":140
 *     limit.rlim_cur = limit.rlim_max = RLIM_INFINITY
 *     setrlimit(RLIMIT_STACK, &limit)
 *     limit.rlim_cur = limit.rlim_max = 0             # <<<<<<<<<<<<<<
 *     setrlimit(RLIMIT_CORE, &limit)
 * 
 */
  __pyx_v_limit.rlim_cur = 0;
  __pyx_v_limit.rlim_max = 0;

  /* "cptbox/_cptbox.pyx":141
 *     setrlimit(RLIMIT_STACK, &limit)
 *     limit.rlim_cur = limit.rlim_max = 0
 *     setrlimit(RLIMIT_CORE, &limit)             # <<<<<<<<<<<<<<
 * 
 *     if config.stdin >= 0:  dup2(config.stdin, 0)
 */
  setrlimit(RLIMIT_CORE, (&__pyx_v_limit));

  /* "cptbox/_cptbox.pyx":143
 *     setrlimit(RLIMIT_CORE, &limit)
 * 
 *     if config.stdin >= 0:  dup2(config.stdin, 0)             # <<<<<<<<<<<<<<
 *     if config.stdout >= 0: dup2(config.stdout, 1)
 *     if config.stderr >= 0: dup2(config.stderr, 2)
 */
  __pyx_t_1 = ((__pyx_v_config->stdin >= 0) != 0);
  if (__pyx_t_1) {
    dup2(__pyx_v_config->stdin, 0);
  }

  /* "cptbox/_cptbox.pyx":144
 * 
 *     if config.stdin >= 0:  dup2(config.stdin, 0)
 *     if config.stdout >= 0: dup2(config.stdout, 1)             # <<<<<<<<<<<<<<
 *     if config.stderr >= 0: dup2(config.stderr, 2)
 * 
 */
  __pyx_t_1 = ((__pyx_v_config->stdout >= 0) != 0);
  if (__pyx_t_1) {
    dup2(__pyx_v_config->stdout, 1);
  }

  /* "cptbox/_cptbox.pyx":145
 *     if config.stdin >= 0:  dup2(config.stdin, 0)
 *     if config.stdout >= 0: dup2(config.stdout, 1)
 *     if config.stderr >= 0: dup2(config.stderr, 2)             # <<<<<<<<<<<<<<
 * 
 *     for i in xrange(3, config.max_fd + 1):
 */
  __pyx_t_1 = ((__pyx_v_config->stderr >= 0) != 0);
  if (__pyx_t_1) {
    dup2(__pyx_v_config->stderr, 2);
  }

  /* "cptbox/_cptbox.pyx":147
 *     if config.stderr >= 0: dup2(config.stderr, 2)
 * 
 *     for i in xrange(3, config.max_fd + 1):             # <<<<<<<<<<<<<<
 *         dup2(config.fds[i - 3], i)
 * 
 */
  __pyx_t_5 = (__pyx_v_config->max_fd + 1);
  for (__pyx_t_4 = 3; __pyx_t_4 < __pyx_t_5; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "cptbox/_cptbox.pyx":148
 * 
 *     for i in xrange(3, config.max_fd + 1):
 *         dup2(config.fds[i - 3], i)             # <<<<<<<<<<<<<<
 * 
 *     while True:
 */
    dup2((__pyx_v_config->fds[(__pyx_v_i - 3)]), __pyx_v_i);
  }

  /* "cptbox/_cptbox.pyx":150
 *         dup2(config.fds[i - 3], i)
 * 
 *     while True:             # <<<<<<<<<<<<<<
 *         dir = readdir(d)
 *         if dir == NULL:
 */
  while (1) {

    /* "cptbox/_cptbox.pyx":151
 * 
 *     while True:
 *         dir = readdir(d)             # <<<<<<<<<<<<<<
 *         if dir == NULL:
 *             break
 */
    __pyx_v_dir = readdir(__pyx_v_d);

    /* "cptbox/_cptbox.pyx":152
 *     while True:
 *         dir = readdir(d)
 *         if dir == NULL:             # <<<<<<<<<<<<<<
 *             break
 *         fd = atoi(dir.d_name)
 */
    __pyx_t_1 = ((__pyx_v_dir == NULL) != 0);
    if (__pyx_t_1) {

      /* "cptbox/_cptbox.pyx":153
 *         dir = readdir(d)
 *         if dir == NULL:
 *             break             # <<<<<<<<<<<<<<
 *         fd = atoi(dir.d_name)
 *         if fd > config.max_fd:
 */
      goto __pyx_L14_break;

      /* "cptbox/_cptbox.pyx":152
 *     while True:
 *         dir = readdir(d)
 *         if dir == NULL:             # <<<<<<<<<<<<<<
 *             break
 *         fd = atoi(dir.d_name)
 */
    }

    /* "cptbox/_cptbox.pyx":154
 *         if dir == NULL:
 *             break
 *         fd = atoi(dir.d_name)             # <<<<<<<<<<<<<<
 *         if fd > config.max_fd:
 *             close(fd)
 */
    __pyx_v_fd = atoi(__pyx_v_dir->d_name);

    /* "cptbox/_cptbox.pyx":155
 *             break
 *         fd = atoi(dir.d_name)
 *         if fd > config.max_fd:             # <<<<<<<<<<<<<<
 *             close(fd)
 *     ptrace(PTRACE_TRACEME, 0, NULL, NULL)
 */
    __pyx_t_1 = ((__pyx_v_fd > __pyx_v_config->max_fd) != 0);
    if (__pyx_t_1) {

      /* "cptbox/_cptbox.pyx":156
 *         fd = atoi(dir.d_name)
 *         if fd > config.max_fd:
 *             close(fd)             # <<<<<<<<<<<<<<
 *     ptrace(PTRACE_TRACEME, 0, NULL, NULL)
 *     kill(getpid(), SIGSTOP)
 */
      close(__pyx_v_fd);

      /* "cptbox/_cptbox.pyx":155
 *             break
 *         fd = atoi(dir.d_name)
 *         if fd > config.max_fd:             # <<<<<<<<<<<<<<
 *             close(fd)
 *     ptrace(PTRACE_TRACEME, 0, NULL, NULL)
 */
    }
  }
  __pyx_L14_break:;

  /* "cptbox/_cptbox.pyx":157
 *         if fd > config.max_fd:
 *             close(fd)
 *     ptrace(PTRACE_TRACEME, 0, NULL, NULL)             # <<<<<<<<<<<<<<
 *     kill(getpid(), SIGSTOP)
 *     execve(config.file, config.argv, config.envp)
 */
  ptrace(PTRACE_TRACEME, 0, NULL, NULL);

  /* "cptbox/_cptbox.pyx":158
 *             close(fd)
 *     ptrace(PTRACE_TRACEME, 0, NULL, NULL)
 *     kill(getpid(), SIGSTOP)             # <<<<<<<<<<<<<<
 *     execve(config.file, config.argv, config.envp)
 *     return 3306
 */
  kill(getpid(), SIGSTOP);

  /* "cptbox/_cptbox.pyx":159
 *     ptrace(PTRACE_TRACEME, 0, NULL, NULL)
 *     kill(getpid(), SIGSTOP)
 *     execve(config.file, config.argv, config.envp)             # <<<<<<<<<<<<<<
 *     return 3306
 * 
 */
  execve(__pyx_v_config->file, __pyx_v_config->argv, __pyx_v_config->envp);

  /* "cptbox/_cptbox.pyx":160
 *     kill(getpid(), SIGSTOP)
 *     execve(config.file, config.argv, config.envp)
 *     return 3306             # <<<<<<<<<<<<<<
 * 
 * cdef int pt_syscall_handler(void *context, int syscall) nogil:
 */
  __pyx_r = 0xCEA;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":111
 *     int *fds
 * 
 * cdef int pt_child(void *context) nogil:             # <<<<<<<<<<<<<<
 *     cdef child_config *config = <child_config*> context
 *     cdef DIR *d = opendir('/proc/self/fd')
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":162
 *     return 3306
 * 
 * cdef int pt_syscall_handler(void *context, int syscall) nogil:             # <<<<<<<<<<<<<<
 *     return (<Process>context)._syscall_handler(syscall)
 * 
 */

static int __pyx_f_6cptbox_7_cptbox_pt_syscall_handler(void *__pyx_v_context, int __pyx_v_syscall) {
  int __pyx_r;

  /* "cptbox/_cptbox.pyx":163
 * 
 * cdef int pt_syscall_handler(void *context, int syscall) nogil:
 *     return (<Process>context)._syscall_handler(syscall)             # <<<<<<<<<<<<<<
 * 
 * cdef void pt_syscall_return_handler(void *context, int syscall) with gil:
 */
  __pyx_r = ((struct __pyx_vtabstruct_6cptbox_7_cptbox_Process *)((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_context)->__pyx_vtab)->_syscall_handler(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_context), __pyx_v_syscall);
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":162
 *     return 3306
 * 
 * cdef int pt_syscall_handler(void *context, int syscall) nogil:             # <<<<<<<<<<<<<<
 *     return (<Process>context)._syscall_handler(syscall)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":165
 *     return (<Process>context)._syscall_handler(syscall)
 * 
 * cdef void pt_syscall_return_handler(void *context, int syscall) with gil:             # <<<<<<<<<<<<<<
 *     (<Debugger>context)._on_return(syscall)
 * 
 */

static void __pyx_f_6cptbox_7_cptbox_pt_syscall_return_handler(void *__pyx_v_context, int __pyx_v_syscall) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("pt_syscall_return_handler", 0);

  /* "cptbox/_cptbox.pyx":166
 * 
 * cdef void pt_syscall_return_handler(void *context, int syscall) with gil:
 *     (<Debugger>context)._on_return(syscall)             # <<<<<<<<<<<<<<
 * 
 * cdef int pt_event_handler(void *context, int event, unsigned long param) nogil:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6cptbox_7_cptbox_Debugger *)((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_context)->__pyx_vtab)->_on_return(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_context), __pyx_v_syscall); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cptbox/_cptbox.pyx":165
 *     return (<Process>context)._syscall_handler(syscall)
 * 
 * cdef void pt_syscall_return_handler(void *context, int syscall) with gil:             # <<<<<<<<<<<<<<
 *     (<Debugger>context)._on_return(syscall)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("cptbox._cptbox.pt_syscall_return_handler", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "cptbox/_cptbox.pyx":168
 *     (<Debugger>context)._on_return(syscall)
 * 
 * cdef int pt_event_handler(void *context, int event, unsigned long param) nogil:             # <<<<<<<<<<<<<<
 *     return (<Process>context)._event_handler(event, param)
 * 
 */

static int __pyx_f_6cptbox_7_cptbox_pt_event_handler(void *__pyx_v_context, int __pyx_v_event, unsigned long __pyx_v_param) {
  int __pyx_r;

  /* "cptbox/_cptbox.pyx":169
 * 
 * cdef int pt_event_handler(void *context, int event, unsigned long param) nogil:
 *     return (<Process>context)._event_handler(event, param)             # <<<<<<<<<<<<<<
 * 
 * cdef char **alloc_string_array(list):
 */
  __pyx_r = ((struct __pyx_vtabstruct_6cptbox_7_cptbox_Process *)((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_context)->__pyx_vtab)->_event_handler(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_context), __pyx_v_event, __pyx_v_param);
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":168
 *     (<Debugger>context)._on_return(syscall)
 * 
 * cdef int pt_event_handler(void *context, int event, unsigned long param) nogil:             # <<<<<<<<<<<<<<
 *     return (<Process>context)._event_handler(event, param)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":171
 *     return (<Process>context)._event_handler(event, param)
 * 
 * cdef char **alloc_string_array(list):             # <<<<<<<<<<<<<<
 *     cdef char **array = <char**>malloc((len(list) + 1) * sizeof(char*))
 *     for i, elem in enumerate(list):
 */

static char **__pyx_f_6cptbox_7_cptbox_alloc_string_array(PyObject *__pyx_v_list) {
  char **__pyx_v_array;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_elem = NULL;
  char **__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("alloc_string_array", 0);

  /* "cptbox/_cptbox.pyx":172
 * 
 * cdef char **alloc_string_array(list):
 *     cdef char **array = <char**>malloc((len(list) + 1) * sizeof(char*))             # <<<<<<<<<<<<<<
 *     for i, elem in enumerate(list):
 *         array[i] = elem
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_list); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_array = ((char **)malloc(((__pyx_t_1 + 1) * (sizeof(char *)))));

  /* "cptbox/_cptbox.pyx":173
 * cdef char **alloc_string_array(list):
 *     cdef char **array = <char**>malloc((len(list) + 1) * sizeof(char*))
 *     for i, elem in enumerate(list):             # <<<<<<<<<<<<<<
 *         array[i] = elem
 *     array[len(list)] = NULL
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_list)) || PyTuple_CheckExact(__pyx_v_list)) {
    __pyx_t_3 = __pyx_v_list; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_list); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_3);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_elem, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "cptbox/_cptbox.pyx":174
 *     cdef char **array = <char**>malloc((len(list) + 1) * sizeof(char*))
 *     for i, elem in enumerate(list):
 *         array[i] = elem             # <<<<<<<<<<<<<<
 *     array[len(list)] = NULL
 *     return array
 */
    __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_elem); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_array[__pyx_t_7]) = __pyx_t_6;

    /* "cptbox/_cptbox.pyx":173
 * cdef char **alloc_string_array(list):
 *     cdef char **array = <char**>malloc((len(list) + 1) * sizeof(char*))
 *     for i, elem in enumerate(list):             # <<<<<<<<<<<<<<
 *         array[i] = elem
 *     array[len(list)] = NULL
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cptbox/_cptbox.pyx":175
 *     for i, elem in enumerate(list):
 *         array[i] = elem
 *     array[len(list)] = NULL             # <<<<<<<<<<<<<<
 *     return array
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_list); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  (__pyx_v_array[__pyx_t_1]) = NULL;

  /* "cptbox/_cptbox.pyx":176
 *         array[i] = elem
 *     array[len(list)] = NULL
 *     return array             # <<<<<<<<<<<<<<
 * 
 * cpdef unsigned long get_memory(pid_t pid) nogil:
 */
  __pyx_r = __pyx_v_array;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":171
 *     return (<Process>context)._event_handler(event, param)
 * 
 * cdef char **alloc_string_array(list):             # <<<<<<<<<<<<<<
 *     cdef char **array = <char**>malloc((len(list) + 1) * sizeof(char*))
 *     for i, elem in enumerate(list):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("cptbox._cptbox.alloc_string_array", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_elem);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":178
 *     return array
 * 
 * cpdef unsigned long get_memory(pid_t pid) nogil:             # <<<<<<<<<<<<<<
 *     cdef unsigned long memory = 0
 *     cdef char path[128]
 */

static PyObject *__pyx_pw_6cptbox_7_cptbox_1get_memory(PyObject *__pyx_self, PyObject *__pyx_arg_pid); /*proto*/
static unsigned long __pyx_f_6cptbox_7_cptbox_get_memory(pid_t __pyx_v_pid, CYTHON_UNUSED int __pyx_skip_dispatch) {
  unsigned long __pyx_v_memory;
  char __pyx_v_path[0x80];
  char __pyx_v_line[0x80];
  char *__pyx_v_start;
  FILE *__pyx_v_file;
  int __pyx_v_length;
  unsigned long __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;

  /* "cptbox/_cptbox.pyx":179
 * 
 * cpdef unsigned long get_memory(pid_t pid) nogil:
 *     cdef unsigned long memory = 0             # <<<<<<<<<<<<<<
 *     cdef char path[128]
 *     cdef char line[128]
 */
  __pyx_v_memory = 0;

  /* "cptbox/_cptbox.pyx":186
 *     cdef int length
 * 
 *     sprintf(path, '/proc/%d/status', pid)             # <<<<<<<<<<<<<<
 *     file = fopen(path, 'r')
 *     if file == NULL:
 */
  sprintf(__pyx_v_path, __pyx_k_proc_d_status, __pyx_v_pid);

  /* "cptbox/_cptbox.pyx":187
 * 
 *     sprintf(path, '/proc/%d/status', pid)
 *     file = fopen(path, 'r')             # <<<<<<<<<<<<<<
 *     if file == NULL:
 *         return 0
 */
  __pyx_v_file = fopen(__pyx_v_path, __pyx_k_r);

  /* "cptbox/_cptbox.pyx":188
 *     sprintf(path, '/proc/%d/status', pid)
 *     file = fopen(path, 'r')
 *     if file == NULL:             # <<<<<<<<<<<<<<
 *         return 0
 *     while True:
 */
  __pyx_t_1 = ((__pyx_v_file == NULL) != 0);
  if (__pyx_t_1) {

    /* "cptbox/_cptbox.pyx":189
 *     file = fopen(path, 'r')
 *     if file == NULL:
 *         return 0             # <<<<<<<<<<<<<<
 *     while True:
 *         if fgets(line, 128, file) == NULL:
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "cptbox/_cptbox.pyx":188
 *     sprintf(path, '/proc/%d/status', pid)
 *     file = fopen(path, 'r')
 *     if file == NULL:             # <<<<<<<<<<<<<<
 *         return 0
 *     while True:
 */
  }

  /* "cptbox/_cptbox.pyx":190
 *     if file == NULL:
 *         return 0
 *     while True:             # <<<<<<<<<<<<<<
 *         if fgets(line, 128, file) == NULL:
 *             break
 */
  while (1) {

    /* "cptbox/_cptbox.pyx":191
 *         return 0
 *     while True:
 *         if fgets(line, 128, file) == NULL:             # <<<<<<<<<<<<<<
 *             break
 *         if strncmp(line, "VmHWM:", 6) == 0:
 */
    __pyx_t_1 = ((fgets(__pyx_v_line, 0x80, __pyx_v_file) == NULL) != 0);
    if (__pyx_t_1) {

      /* "cptbox/_cptbox.pyx":192
 *     while True:
 *         if fgets(line, 128, file) == NULL:
 *             break             # <<<<<<<<<<<<<<
 *         if strncmp(line, "VmHWM:", 6) == 0:
 *             start = line
 */
      goto __pyx_L5_break;

      /* "cptbox/_cptbox.pyx":191
 *         return 0
 *     while True:
 *         if fgets(line, 128, file) == NULL:             # <<<<<<<<<<<<<<
 *             break
 *         if strncmp(line, "VmHWM:", 6) == 0:
 */
    }

    /* "cptbox/_cptbox.pyx":193
 *         if fgets(line, 128, file) == NULL:
 *             break
 *         if strncmp(line, "VmHWM:", 6) == 0:             # <<<<<<<<<<<<<<
 *             start = line
 *             length = strlen(line)
 */
    __pyx_t_1 = ((strncmp(__pyx_v_line, __pyx_k_VmHWM, 6) == 0) != 0);
    if (__pyx_t_1) {

      /* "cptbox/_cptbox.pyx":194
 *             break
 *         if strncmp(line, "VmHWM:", 6) == 0:
 *             start = line             # <<<<<<<<<<<<<<
 *             length = strlen(line)
 *             line[length-3] = '\0'
 */
      __pyx_v_start = __pyx_v_line;

      /* "cptbox/_cptbox.pyx":195
 *         if strncmp(line, "VmHWM:", 6) == 0:
 *             start = line
 *             length = strlen(line)             # <<<<<<<<<<<<<<
 *             line[length-3] = '\0'
 *             while not 48 <= start[0] <= 57:
 */
      __pyx_v_length = strlen(__pyx_v_line);

      /* "cptbox/_cptbox.pyx":196
 *             start = line
 *             length = strlen(line)
 *             line[length-3] = '\0'             # <<<<<<<<<<<<<<
 *             while not 48 <= start[0] <= 57:
 *                 start += 1
 */
      (__pyx_v_line[(__pyx_v_length - 3)]) = '\x00';

      /* "cptbox/_cptbox.pyx":197
 *             length = strlen(line)
 *             line[length-3] = '\0'
 *             while not 48 <= start[0] <= 57:             # <<<<<<<<<<<<<<
 *                 start += 1
 *             memory = strtoul(start, NULL, 0)
 */
      while (1) {
        __pyx_t_1 = (48 <= (__pyx_v_start[0]));
        if (__pyx_t_1) {
          __pyx_t_1 = ((__pyx_v_start[0]) <= 57);
        }
        __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
        if (!__pyx_t_2) break;

        /* "cptbox/_cptbox.pyx":198
 *             line[length-3] = '\0'
 *             while not 48 <= start[0] <= 57:
 *                 start += 1             # <<<<<<<<<<<<<<
 *             memory = strtoul(start, NULL, 0)
 *             break
 */
        __pyx_v_start = (__pyx_v_start + 1);
      }

      /* "cptbox/_cptbox.pyx":199
 *             while not 48 <= start[0] <= 57:
 *                 start += 1
 *             memory = strtoul(start, NULL, 0)             # <<<<<<<<<<<<<<
 *             break
 *     fclose(file)
 */
      __pyx_v_memory = strtoul(__pyx_v_start, NULL, 0);

      /* "cptbox/_cptbox.pyx":200
 *                 start += 1
 *             memory = strtoul(start, NULL, 0)
 *             break             # <<<<<<<<<<<<<<
 *     fclose(file)
 *     return memory
 */
      goto __pyx_L5_break;

      /* "cptbox/_cptbox.pyx":193
 *         if fgets(line, 128, file) == NULL:
 *             break
 *         if strncmp(line, "VmHWM:", 6) == 0:             # <<<<<<<<<<<<<<
 *             start = line
 *             length = strlen(line)
 */
    }
  }
  __pyx_L5_break:;

  /* "cptbox/_cptbox.pyx":201
 *             memory = strtoul(start, NULL, 0)
 *             break
 *     fclose(file)             # <<<<<<<<<<<<<<
 *     return memory
 * 
 */
  fclose(__pyx_v_file);

  /* "cptbox/_cptbox.pyx":202
 *             break
 *     fclose(file)
 *     return memory             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_memory;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":178
 *     return array
 * 
 * cpdef unsigned long get_memory(pid_t pid) nogil:             # <<<<<<<<<<<<<<
 *     cdef unsigned long memory = 0
 *     cdef char path[128]
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_1get_memory(PyObject *__pyx_self, PyObject *__pyx_arg_pid); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_1get_memory(PyObject *__pyx_self, PyObject *__pyx_arg_pid) {
  pid_t __pyx_v_pid;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_memory (wrapper)", 0);
  assert(__pyx_arg_pid); {
    __pyx_v_pid = __Pyx_PyInt_As_pid_t(__pyx_arg_pid); if (unlikely((__pyx_v_pid == (pid_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cptbox._cptbox.get_memory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_get_memory(__pyx_self, ((pid_t)__pyx_v_pid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_get_memory(CYTHON_UNUSED PyObject *__pyx_self, pid_t __pyx_v_pid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_memory", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_f_6cptbox_7_cptbox_get_memory(__pyx_v_pid, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.get_memory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":211
 * 
 *     property getpid_syscall:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getpid_syscall
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_14getpid_syscall_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_14getpid_syscall_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_14getpid_syscall___get__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_14getpid_syscall___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cptbox/_cptbox.pyx":212
 *     property getpid_syscall:
 *         def __get__(self):
 *             return self._getpid_syscall             # <<<<<<<<<<<<<<
 * 
 *     property syscall:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_getpid_syscall); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":211
 * 
 *     property getpid_syscall:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getpid_syscall
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.getpid_syscall.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":215
 * 
 *     property syscall:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.syscall()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_7syscall_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_7syscall_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_7syscall___get__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_7syscall___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cptbox/_cptbox.pyx":216
 *     property syscall:
 *         def __get__(self):
 *             return self.thisptr.syscall()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->syscall()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":215
 * 
 *     property syscall:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.syscall()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.syscall.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":218
 *             return self.thisptr.syscall()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.syscall(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_7syscall_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_7syscall_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_7syscall_2__set__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6cptbox_7_cptbox_8Debugger_7syscall_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cptbox/_cptbox.pyx":219
 * 
 *         def __set__(self, value):
 *             self.thisptr.syscall(value)             # <<<<<<<<<<<<<<
 * 
 *     property result:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->thisptr->syscall(__pyx_t_1);

  /* "cptbox/_cptbox.pyx":218
 *             return self.thisptr.syscall()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.syscall(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.syscall.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":222
 * 
 *     property result:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.result()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_6result_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_6result_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_6result___get__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_6result___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cptbox/_cptbox.pyx":223
 *     property result:
 *         def __get__(self):
 *             return self.thisptr.result()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->thisptr->result()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":222
 * 
 *     property result:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.result()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.result.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":225
 *             return self.thisptr.result()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.result(<long>value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_6result_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_6result_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_6result_2__set__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6cptbox_7_cptbox_8Debugger_6result_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cptbox/_cptbox.pyx":226
 * 
 *         def __set__(self, value):
 *             self.thisptr.result(<long>value)             # <<<<<<<<<<<<<<
 * 
 *     property uresult:
 */
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->thisptr->result(((long)__pyx_t_1));

  /* "cptbox/_cptbox.pyx":225
 *             return self.thisptr.result()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.result(<long>value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.result.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":229
 * 
 *     property uresult:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long>self.thisptr.result()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_7uresult_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_7uresult_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_7uresult___get__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_7uresult___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cptbox/_cptbox.pyx":230
 *     property uresult:
 *         def __get__(self):
 *             return <unsigned long>self.thisptr.result()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(((unsigned long)__pyx_v_self->thisptr->result())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":229
 * 
 *     property uresult:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long>self.thisptr.result()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.uresult.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":232
 *             return <unsigned long>self.thisptr.result()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.result(<long><unsigned long>value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_7uresult_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_7uresult_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_7uresult_2__set__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6cptbox_7_cptbox_8Debugger_7uresult_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cptbox/_cptbox.pyx":233
 * 
 *         def __set__(self, value):
 *             self.thisptr.result(<long><unsigned long>value)             # <<<<<<<<<<<<<<
 * 
 *     property arg0:
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->thisptr->result(((long)((unsigned long)__pyx_t_1)));

  /* "cptbox/_cptbox.pyx":232
 *             return <unsigned long>self.thisptr.result()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.result(<long><unsigned long>value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.uresult.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":236
 * 
 *     property arg0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.arg0()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_4arg0_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_4arg0_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_4arg0___get__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_4arg0___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cptbox/_cptbox.pyx":237
 *     property arg0:
 *         def __get__(self):
 *             return self.thisptr.arg0()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->thisptr->arg0()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":236
 * 
 *     property arg0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.arg0()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.arg0.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":239
 *             return self.thisptr.arg0()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg0(<long>value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_4arg0_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_4arg0_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_4arg0_2__set__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6cptbox_7_cptbox_8Debugger_4arg0_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cptbox/_cptbox.pyx":240
 * 
 *         def __set__(self, value):
 *             self.thisptr.arg0(<long>value)             # <<<<<<<<<<<<<<
 * 
 *     property arg1:
 */
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->thisptr->arg0(((long)__pyx_t_1));

  /* "cptbox/_cptbox.pyx":239
 *             return self.thisptr.arg0()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg0(<long>value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.arg0.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":243
 * 
 *     property arg1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.arg1()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_4arg1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_4arg1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_4arg1___get__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_4arg1___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cptbox/_cptbox.pyx":244
 *     property arg1:
 *         def __get__(self):
 *             return self.thisptr.arg1()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->thisptr->arg1()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":243
 * 
 *     property arg1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.arg1()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.arg1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":246
 *             return self.thisptr.arg1()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg1(<long>value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_4arg1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_4arg1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_4arg1_2__set__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6cptbox_7_cptbox_8Debugger_4arg1_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cptbox/_cptbox.pyx":247
 * 
 *         def __set__(self, value):
 *             self.thisptr.arg1(<long>value)             # <<<<<<<<<<<<<<
 * 
 *     property arg2:
 */
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->thisptr->arg1(((long)__pyx_t_1));

  /* "cptbox/_cptbox.pyx":246
 *             return self.thisptr.arg1()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg1(<long>value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.arg1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":250
 * 
 *     property arg2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.arg2()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_4arg2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_4arg2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_4arg2___get__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_4arg2___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cptbox/_cptbox.pyx":251
 *     property arg2:
 *         def __get__(self):
 *             return self.thisptr.arg2()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->thisptr->arg2()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":250
 * 
 *     property arg2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.arg2()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.arg2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":253
 *             return self.thisptr.arg2()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg2(<long>value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_4arg2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_4arg2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_4arg2_2__set__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6cptbox_7_cptbox_8Debugger_4arg2_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cptbox/_cptbox.pyx":254
 * 
 *         def __set__(self, value):
 *             self.thisptr.arg2(<long>value)             # <<<<<<<<<<<<<<
 * 
 *     property arg3:
 */
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->thisptr->arg2(((long)__pyx_t_1));

  /* "cptbox/_cptbox.pyx":253
 *             return self.thisptr.arg2()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg2(<long>value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.arg2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":257
 * 
 *     property arg3:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.arg3()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_4arg3_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_4arg3_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_4arg3___get__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_4arg3___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cptbox/_cptbox.pyx":258
 *     property arg3:
 *         def __get__(self):
 *             return self.thisptr.arg3()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->thisptr->arg3()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":257
 * 
 *     property arg3:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.arg3()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.arg3.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":260
 *             return self.thisptr.arg3()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg3(<long>value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_4arg3_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_4arg3_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_4arg3_2__set__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6cptbox_7_cptbox_8Debugger_4arg3_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cptbox/_cptbox.pyx":261
 * 
 *         def __set__(self, value):
 *             self.thisptr.arg3(<long>value)             # <<<<<<<<<<<<<<
 * 
 *     property arg4:
 */
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->thisptr->arg3(((long)__pyx_t_1));

  /* "cptbox/_cptbox.pyx":260
 *             return self.thisptr.arg3()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg3(<long>value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.arg3.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":264
 * 
 *     property arg4:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.arg4()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_4arg4_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_4arg4_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_4arg4___get__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_4arg4___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cptbox/_cptbox.pyx":265
 *     property arg4:
 *         def __get__(self):
 *             return self.thisptr.arg4()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->thisptr->arg4()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":264
 * 
 *     property arg4:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.arg4()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.arg4.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":267
 *             return self.thisptr.arg4()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg4(<long>value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_4arg4_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_4arg4_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_4arg4_2__set__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6cptbox_7_cptbox_8Debugger_4arg4_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cptbox/_cptbox.pyx":268
 * 
 *         def __set__(self, value):
 *             self.thisptr.arg4(<long>value)             # <<<<<<<<<<<<<<
 * 
 *     property arg5:
 */
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->thisptr->arg4(((long)__pyx_t_1));

  /* "cptbox/_cptbox.pyx":267
 *             return self.thisptr.arg4()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg4(<long>value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.arg4.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":271
 * 
 *     property arg5:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.arg5()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_4arg5_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_4arg5_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_4arg5___get__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_4arg5___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cptbox/_cptbox.pyx":272
 *     property arg5:
 *         def __get__(self):
 *             return self.thisptr.arg5()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->thisptr->arg5()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":271
 * 
 *     property arg5:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.arg5()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.arg5.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":274
 *             return self.thisptr.arg5()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg5(<long>value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_4arg5_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_4arg5_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_4arg5_2__set__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6cptbox_7_cptbox_8Debugger_4arg5_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cptbox/_cptbox.pyx":275
 * 
 *         def __set__(self, value):
 *             self.thisptr.arg5(<long>value)             # <<<<<<<<<<<<<<
 * 
 *     property uarg0:
 */
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->thisptr->arg5(((long)__pyx_t_1));

  /* "cptbox/_cptbox.pyx":274
 *             return self.thisptr.arg5()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg5(<long>value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.arg5.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":278
 * 
 *     property uarg0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long>self.thisptr.arg0()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg0_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg0_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg0___get__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg0___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cptbox/_cptbox.pyx":279
 *     property uarg0:
 *         def __get__(self):
 *             return <unsigned long>self.thisptr.arg0()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(((unsigned long)__pyx_v_self->thisptr->arg0())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":278
 * 
 *     property uarg0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long>self.thisptr.arg0()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.uarg0.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":281
 *             return <unsigned long>self.thisptr.arg0()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg0(<long><unsigned long>value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg0_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg0_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg0_2__set__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg0_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cptbox/_cptbox.pyx":282
 * 
 *         def __set__(self, value):
 *             self.thisptr.arg0(<long><unsigned long>value)             # <<<<<<<<<<<<<<
 * 
 *     property uarg1:
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->thisptr->arg0(((long)((unsigned long)__pyx_t_1)));

  /* "cptbox/_cptbox.pyx":281
 *             return <unsigned long>self.thisptr.arg0()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg0(<long><unsigned long>value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.uarg0.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":285
 * 
 *     property uarg1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long>self.thisptr.arg1()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg1___get__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg1___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cptbox/_cptbox.pyx":286
 *     property uarg1:
 *         def __get__(self):
 *             return <unsigned long>self.thisptr.arg1()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(((unsigned long)__pyx_v_self->thisptr->arg1())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":285
 * 
 *     property uarg1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long>self.thisptr.arg1()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.uarg1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":288
 *             return <unsigned long>self.thisptr.arg1()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg1(<long><unsigned long>value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg1_2__set__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg1_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cptbox/_cptbox.pyx":289
 * 
 *         def __set__(self, value):
 *             self.thisptr.arg1(<long><unsigned long>value)             # <<<<<<<<<<<<<<
 * 
 *     property uarg2:
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->thisptr->arg1(((long)((unsigned long)__pyx_t_1)));

  /* "cptbox/_cptbox.pyx":288
 *             return <unsigned long>self.thisptr.arg1()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg1(<long><unsigned long>value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.uarg1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":292
 * 
 *     property uarg2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long>self.thisptr.arg2()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg2___get__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg2___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cptbox/_cptbox.pyx":293
 *     property uarg2:
 *         def __get__(self):
 *             return <unsigned long>self.thisptr.arg2()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(((unsigned long)__pyx_v_self->thisptr->arg2())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":292
 * 
 *     property uarg2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long>self.thisptr.arg2()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.uarg2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":295
 *             return <unsigned long>self.thisptr.arg2()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg2(<long><unsigned long>value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg2_2__set__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg2_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cptbox/_cptbox.pyx":296
 * 
 *         def __set__(self, value):
 *             self.thisptr.arg2(<long><unsigned long>value)             # <<<<<<<<<<<<<<
 * 
 *     property uarg3:
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->thisptr->arg2(((long)((unsigned long)__pyx_t_1)));

  /* "cptbox/_cptbox.pyx":295
 *             return <unsigned long>self.thisptr.arg2()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg2(<long><unsigned long>value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.uarg2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":299
 * 
 *     property uarg3:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long>self.thisptr.arg3()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg3_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg3_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg3___get__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg3___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cptbox/_cptbox.pyx":300
 *     property uarg3:
 *         def __get__(self):
 *             return <unsigned long>self.thisptr.arg3()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(((unsigned long)__pyx_v_self->thisptr->arg3())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":299
 * 
 *     property uarg3:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long>self.thisptr.arg3()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.uarg3.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":302
 *             return <unsigned long>self.thisptr.arg3()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg3(<long><unsigned long>value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg3_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg3_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg3_2__set__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg3_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cptbox/_cptbox.pyx":303
 * 
 *         def __set__(self, value):
 *             self.thisptr.arg3(<long><unsigned long>value)             # <<<<<<<<<<<<<<
 * 
 *     property uarg4:
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->thisptr->arg3(((long)((unsigned long)__pyx_t_1)));

  /* "cptbox/_cptbox.pyx":302
 *             return <unsigned long>self.thisptr.arg3()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg3(<long><unsigned long>value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.uarg3.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":306
 * 
 *     property uarg4:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long>self.thisptr.arg4()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg4_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg4_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg4___get__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg4___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cptbox/_cptbox.pyx":307
 *     property uarg4:
 *         def __get__(self):
 *             return <unsigned long>self.thisptr.arg4()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(((unsigned long)__pyx_v_self->thisptr->arg4())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":306
 * 
 *     property uarg4:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long>self.thisptr.arg4()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.uarg4.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":309
 *             return <unsigned long>self.thisptr.arg4()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg4(<long><unsigned long>value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg4_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg4_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg4_2__set__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg4_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cptbox/_cptbox.pyx":310
 * 
 *         def __set__(self, value):
 *             self.thisptr.arg4(<long><unsigned long>value)             # <<<<<<<<<<<<<<
 * 
 *     property uarg5:
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->thisptr->arg4(((long)((unsigned long)__pyx_t_1)));

  /* "cptbox/_cptbox.pyx":309
 *             return <unsigned long>self.thisptr.arg4()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg4(<long><unsigned long>value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.uarg4.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":313
 * 
 *     property uarg5:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long>self.thisptr.arg5()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg5_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg5_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg5___get__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg5___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cptbox/_cptbox.pyx":314
 *     property uarg5:
 *         def __get__(self):
 *             return <unsigned long>self.thisptr.arg5()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(((unsigned long)__pyx_v_self->thisptr->arg5())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":313
 * 
 *     property uarg5:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long>self.thisptr.arg5()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.uarg5.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":316
 *             return <unsigned long>self.thisptr.arg5()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg5(<long><unsigned long>value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg5_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg5_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg5_2__set__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6cptbox_7_cptbox_8Debugger_5uarg5_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cptbox/_cptbox.pyx":317
 * 
 *         def __set__(self, value):
 *             self.thisptr.arg5(<long><unsigned long>value)             # <<<<<<<<<<<<<<
 * 
 *     def readstr(self, unsigned long address):
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->thisptr->arg5(((long)((unsigned long)__pyx_t_1)));

  /* "cptbox/_cptbox.pyx":316
 *             return <unsigned long>self.thisptr.arg5()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg5(<long><unsigned long>value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.uarg5.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":319
 *             self.thisptr.arg5(<long><unsigned long>value)
 * 
 *     def readstr(self, unsigned long address):             # <<<<<<<<<<<<<<
 *         cdef char* str = self.thisptr.readstr(address)
 *         pystr = <object>str
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_1readstr(PyObject *__pyx_v_self, PyObject *__pyx_arg_address); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_1readstr(PyObject *__pyx_v_self, PyObject *__pyx_arg_address) {
  unsigned long __pyx_v_address;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readstr (wrapper)", 0);
  assert(__pyx_arg_address); {
    __pyx_v_address = __Pyx_PyInt_As_unsigned_long(__pyx_arg_address); if (unlikely((__pyx_v_address == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.readstr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_readstr(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((unsigned long)__pyx_v_address));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_readstr(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, unsigned long __pyx_v_address) {
  char *__pyx_v_str;
  PyObject *__pyx_v_pystr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readstr", 0);

  /* "cptbox/_cptbox.pyx":320
 * 
 *     def readstr(self, unsigned long address):
 *         cdef char* str = self.thisptr.readstr(address)             # <<<<<<<<<<<<<<
 *         pystr = <object>str
 *         self.thisptr.freestr(str)
 */
  __pyx_v_str = __pyx_v_self->thisptr->readstr(__pyx_v_address);

  /* "cptbox/_cptbox.pyx":321
 *     def readstr(self, unsigned long address):
 *         cdef char* str = self.thisptr.readstr(address)
 *         pystr = <object>str             # <<<<<<<<<<<<<<
 *         self.thisptr.freestr(str)
 *         return pystr
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_str); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_t_1;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pystr = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "cptbox/_cptbox.pyx":322
 *         cdef char* str = self.thisptr.readstr(address)
 *         pystr = <object>str
 *         self.thisptr.freestr(str)             # <<<<<<<<<<<<<<
 *         return pystr
 * 
 */
  __pyx_v_self->thisptr->freestr(__pyx_v_str);

  /* "cptbox/_cptbox.pyx":323
 *         pystr = <object>str
 *         self.thisptr.freestr(str)
 *         return pystr             # <<<<<<<<<<<<<<
 * 
 *     property pid:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pystr);
  __pyx_r = __pyx_v_pystr;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":319
 *             self.thisptr.arg5(<long><unsigned long>value)
 * 
 *     def readstr(self, unsigned long address):             # <<<<<<<<<<<<<<
 *         cdef char* str = self.thisptr.readstr(address)
 *         pystr = <object>str
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.readstr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pystr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":326
 * 
 *     property pid:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getpid()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_3pid_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_3pid_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_3pid___get__(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_3pid___get__(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cptbox/_cptbox.pyx":327
 *     property pid:
 *         def __get__(self):
 *             return self.thisptr.getpid()             # <<<<<<<<<<<<<<
 * 
 *     def on_return(self, callback):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_pid_t(__pyx_v_self->thisptr->getpid()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":326
 * 
 *     property pid:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getpid()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Debugger.pid.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":329
 *             return self.thisptr.getpid()
 * 
 *     def on_return(self, callback):             # <<<<<<<<<<<<<<
 *         self.on_return_callback = callback
 *         self.thisptr.on_return(pt_syscall_return_handler, <void*>self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_3on_return(PyObject *__pyx_v_self, PyObject *__pyx_v_callback); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_8Debugger_3on_return(PyObject *__pyx_v_self, PyObject *__pyx_v_callback) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("on_return (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_8Debugger_2on_return(((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_callback));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_8Debugger_2on_return(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_callback) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("on_return", 0);

  /* "cptbox/_cptbox.pyx":330
 * 
 *     def on_return(self, callback):
 *         self.on_return_callback = callback             # <<<<<<<<<<<<<<
 *         self.thisptr.on_return(pt_syscall_return_handler, <void*>self)
 * 
 */
  __Pyx_INCREF(__pyx_v_callback);
  __Pyx_GIVEREF(__pyx_v_callback);
  __Pyx_GOTREF(__pyx_v_self->on_return_callback);
  __Pyx_DECREF(__pyx_v_self->on_return_callback);
  __pyx_v_self->on_return_callback = __pyx_v_callback;

  /* "cptbox/_cptbox.pyx":331
 *     def on_return(self, callback):
 *         self.on_return_callback = callback
 *         self.thisptr.on_return(pt_syscall_return_handler, <void*>self)             # <<<<<<<<<<<<<<
 * 
 *     cdef _on_return(self, int syscall) with gil:
 */
  __pyx_v_self->thisptr->on_return(__pyx_f_6cptbox_7_cptbox_pt_syscall_return_handler, ((void *)__pyx_v_self));

  /* "cptbox/_cptbox.pyx":329
 *             return self.thisptr.getpid()
 * 
 *     def on_return(self, callback):             # <<<<<<<<<<<<<<
 *         self.on_return_callback = callback
 *         self.thisptr.on_return(pt_syscall_return_handler, <void*>self)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":333
 *         self.thisptr.on_return(pt_syscall_return_handler, <void*>self)
 * 
 *     cdef _on_return(self, int syscall) with gil:             # <<<<<<<<<<<<<<
 *         self.on_return_callback()
 *         self.on_return_callback = None
 */

static PyObject *__pyx_f_6cptbox_7_cptbox_8Debugger__on_return(struct __pyx_obj_6cptbox_7_cptbox_Debugger *__pyx_v_self, CYTHON_UNUSED int __pyx_v_syscall) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_on_return", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_self);

  /* "cptbox/_cptbox.pyx":334
 * 
 *     cdef _on_return(self, int syscall) with gil:
 *         self.on_return_callback()             # <<<<<<<<<<<<<<
 *         self.on_return_callback = None
 * 
 */
  __Pyx_INCREF(__pyx_v_self->on_return_callback);
  __pyx_t_2 = __pyx_v_self->on_return_callback; __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cptbox/_cptbox.pyx":335
 *     cdef _on_return(self, int syscall) with gil:
 *         self.on_return_callback()
 *         self.on_return_callback = None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->on_return_callback);
  __Pyx_DECREF(__pyx_v_self->on_return_callback);
  __pyx_v_self->on_return_callback = Py_None;

  /* "cptbox/_cptbox.pyx":333
 *         self.thisptr.on_return(pt_syscall_return_handler, <void*>self)
 * 
 *     cdef _on_return(self, int syscall) with gil:             # <<<<<<<<<<<<<<
 *         self.on_return_callback()
 *         self.on_return_callback = None
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cptbox._cptbox.Debugger._on_return", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_self);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":350
 *     cdef unsigned long _max_memory
 * 
 *     def __cinit__(self, int bitness, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._child_memory = self._child_address = 0
 *         self._child_stdin = self._child_stdout = self._child_stderr = -1
 */

/* Python wrapper */
static int __pyx_pw_6cptbox_7_cptbox_7Process_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6cptbox_7_cptbox_7Process_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_bitness;
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bitness,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bitness)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_bitness = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_bitness == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("cptbox._cptbox.Process.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process___cinit__(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self), __pyx_v_bitness, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6cptbox_7_cptbox_7Process___cinit__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, int __pyx_v_bitness, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  pt_debugger32 *__pyx_t_1;
  pt_debugger64 *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  pt_debugger *__pyx_t_4;
  pt_process *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cptbox/_cptbox.pyx":351
 * 
 *     def __cinit__(self, int bitness, *args, **kwargs):
 *         self._child_memory = self._child_address = 0             # <<<<<<<<<<<<<<
 *         self._child_stdin = self._child_stdout = self._child_stderr = -1
 *         self._cpu_time = 0
 */
  __pyx_v_self->_child_memory = 0;
  __pyx_v_self->_child_address = 0;

  /* "cptbox/_cptbox.pyx":352
 *     def __cinit__(self, int bitness, *args, **kwargs):
 *         self._child_memory = self._child_address = 0
 *         self._child_stdin = self._child_stdout = self._child_stderr = -1             # <<<<<<<<<<<<<<
 *         self._cpu_time = 0
 *         self._nproc = -1
 */
  __pyx_v_self->_child_stdin = -1;
  __pyx_v_self->_child_stdout = -1;
  __pyx_v_self->_child_stderr = -1;

  /* "cptbox/_cptbox.pyx":353
 *         self._child_memory = self._child_address = 0
 *         self._child_stdin = self._child_stdout = self._child_stderr = -1
 *         self._cpu_time = 0             # <<<<<<<<<<<<<<
 *         self._nproc = -1
 *         if bitness == 32:
 */
  __pyx_v_self->_cpu_time = 0;

  /* "cptbox/_cptbox.pyx":354
 *         self._child_stdin = self._child_stdout = self._child_stderr = -1
 *         self._cpu_time = 0
 *         self._nproc = -1             # <<<<<<<<<<<<<<
 *         if bitness == 32:
 *             self._debugger = new pt_debugger32()
 */
  __pyx_v_self->_nproc = -1;

  /* "cptbox/_cptbox.pyx":355
 *         self._cpu_time = 0
 *         self._nproc = -1
 *         if bitness == 32:             # <<<<<<<<<<<<<<
 *             self._debugger = new pt_debugger32()
 *         elif bitness == 64:
 */
  switch (__pyx_v_bitness) {
    case 32:

    /* "cptbox/_cptbox.pyx":356
 *         self._nproc = -1
 *         if bitness == 32:
 *             self._debugger = new pt_debugger32()             # <<<<<<<<<<<<<<
 *         elif bitness == 64:
 *             self._debugger = new pt_debugger64()
 */
    try {
      __pyx_t_1 = new pt_debugger32();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_self->_debugger = __pyx_t_1;

    /* "cptbox/_cptbox.pyx":355
 *         self._cpu_time = 0
 *         self._nproc = -1
 *         if bitness == 32:             # <<<<<<<<<<<<<<
 *             self._debugger = new pt_debugger32()
 *         elif bitness == 64:
 */
    break;

    /* "cptbox/_cptbox.pyx":357
 *         if bitness == 32:
 *             self._debugger = new pt_debugger32()
 *         elif bitness == 64:             # <<<<<<<<<<<<<<
 *             self._debugger = new pt_debugger64()
 *         else:
 */
    case 64:

    /* "cptbox/_cptbox.pyx":358
 *             self._debugger = new pt_debugger32()
 *         elif bitness == 64:
 *             self._debugger = new pt_debugger64()             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError('Invalid bitness')
 */
    try {
      __pyx_t_2 = new pt_debugger64();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_self->_debugger = __pyx_t_2;

    /* "cptbox/_cptbox.pyx":357
 *         if bitness == 32:
 *             self._debugger = new pt_debugger32()
 *         elif bitness == 64:             # <<<<<<<<<<<<<<
 *             self._debugger = new pt_debugger64()
 *         else:
 */
    break;
    default:

    /* "cptbox/_cptbox.pyx":360
 *             self._debugger = new pt_debugger64()
 *         else:
 *             raise ValueError('Invalid bitness')             # <<<<<<<<<<<<<<
 *         self.debugger = Debugger()
 *         self.debugger.thisptr = self._debugger
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    break;
  }

  /* "cptbox/_cptbox.pyx":361
 *         else:
 *             raise ValueError('Invalid bitness')
 *         self.debugger = Debugger()             # <<<<<<<<<<<<<<
 *         self.debugger.thisptr = self._debugger
 *         self.debugger._getpid_syscall = self._debugger.getpid_syscall()
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6cptbox_7_cptbox_Debugger), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->debugger);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->debugger));
  __pyx_v_self->debugger = ((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "cptbox/_cptbox.pyx":362
 *             raise ValueError('Invalid bitness')
 *         self.debugger = Debugger()
 *         self.debugger.thisptr = self._debugger             # <<<<<<<<<<<<<<
 *         self.debugger._getpid_syscall = self._debugger.getpid_syscall()
 *         self.process = new pt_process(self._debugger)
 */
  __pyx_t_4 = __pyx_v_self->_debugger;
  __pyx_v_self->debugger->thisptr = __pyx_t_4;

  /* "cptbox/_cptbox.pyx":363
 *         self.debugger = Debugger()
 *         self.debugger.thisptr = self._debugger
 *         self.debugger._getpid_syscall = self._debugger.getpid_syscall()             # <<<<<<<<<<<<<<
 *         self.process = new pt_process(self._debugger)
 *         self.process.set_callback(pt_syscall_handler, <void*>self)
 */
  __pyx_v_self->debugger->_getpid_syscall = __pyx_v_self->_debugger->getpid_syscall();

  /* "cptbox/_cptbox.pyx":364
 *         self.debugger.thisptr = self._debugger
 *         self.debugger._getpid_syscall = self._debugger.getpid_syscall()
 *         self.process = new pt_process(self._debugger)             # <<<<<<<<<<<<<<
 *         self.process.set_callback(pt_syscall_handler, <void*>self)
 *         self.process.set_event_proc(pt_event_handler, <void*>self)
 */
  try {
    __pyx_t_5 = new pt_process(__pyx_v_self->_debugger);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_self->process = __pyx_t_5;

  /* "cptbox/_cptbox.pyx":365
 *         self.debugger._getpid_syscall = self._debugger.getpid_syscall()
 *         self.process = new pt_process(self._debugger)
 *         self.process.set_callback(pt_syscall_handler, <void*>self)             # <<<<<<<<<<<<<<
 *         self.process.set_event_proc(pt_event_handler, <void*>self)
 * 
 */
  __pyx_v_self->process->set_callback(__pyx_f_6cptbox_7_cptbox_pt_syscall_handler, ((void *)__pyx_v_self));

  /* "cptbox/_cptbox.pyx":366
 *         self.process = new pt_process(self._debugger)
 *         self.process.set_callback(pt_syscall_handler, <void*>self)
 *         self.process.set_event_proc(pt_event_handler, <void*>self)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->process->set_event_proc(__pyx_f_6cptbox_7_cptbox_pt_event_handler, ((void *)__pyx_v_self));

  /* "cptbox/_cptbox.pyx":350
 *     cdef unsigned long _max_memory
 * 
 *     def __cinit__(self, int bitness, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._child_memory = self._child_address = 0
 *         self._child_stdin = self._child_stdout = self._child_stderr = -1
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cptbox._cptbox.Process.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":368
 *         self.process.set_event_proc(pt_event_handler, <void*>self)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.process
 *         del self._debugger
 */

/* Python wrapper */
static void __pyx_pw_6cptbox_7_cptbox_7Process_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6cptbox_7_cptbox_7Process_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6cptbox_7_cptbox_7Process_2__dealloc__(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6cptbox_7_cptbox_7Process_2__dealloc__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cptbox/_cptbox.pyx":369
 * 
 *     def __dealloc__(self):
 *         del self.process             # <<<<<<<<<<<<<<
 *         del self._debugger
 * 
 */
  delete __pyx_v_self->process;

  /* "cptbox/_cptbox.pyx":370
 *     def __dealloc__(self):
 *         del self.process
 *         del self._debugger             # <<<<<<<<<<<<<<
 * 
 *     def _callback(self, syscall):
 */
  delete __pyx_v_self->_debugger;

  /* "cptbox/_cptbox.pyx":368
 *         self.process.set_event_proc(pt_event_handler, <void*>self)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.process
 *         del self._debugger
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cptbox/_cptbox.pyx":372
 *         del self._debugger
 * 
 *     def _callback(self, syscall):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_5_callback(PyObject *__pyx_v_self, PyObject *__pyx_v_syscall); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_5_callback(PyObject *__pyx_v_self, PyObject *__pyx_v_syscall) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_callback (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_4_callback(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self), ((PyObject *)__pyx_v_syscall));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_4_callback(CYTHON_UNUSED struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_syscall) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_callback", 0);

  /* "cptbox/_cptbox.pyx":373
 * 
 *     def _callback(self, syscall):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     cdef int _syscall_handler(self, int syscall) with gil:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":372
 *         del self._debugger
 * 
 *     def _callback(self, syscall):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":375
 *         return False
 * 
 *     cdef int _syscall_handler(self, int syscall) with gil:             # <<<<<<<<<<<<<<
 *         return self._callback(syscall)
 * 
 */

static int __pyx_f_6cptbox_7_cptbox_7Process__syscall_handler(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, int __pyx_v_syscall) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_syscall_handler", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_self);

  /* "cptbox/_cptbox.pyx":376
 * 
 *     cdef int _syscall_handler(self, int syscall) with gil:
 *         return self._callback(syscall)             # <<<<<<<<<<<<<<
 * 
 *     cdef int _event_handler(self, int event, unsigned long param) nogil:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_callback); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_syscall); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":375
 *         return False
 * 
 *     cdef int _syscall_handler(self, int syscall) with gil:             # <<<<<<<<<<<<<<
 *         return self._callback(syscall)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("cptbox._cptbox.Process._syscall_handler", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_self);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":378
 *         return self._callback(syscall)
 * 
 *     cdef int _event_handler(self, int event, unsigned long param) nogil:             # <<<<<<<<<<<<<<
 *         if event == PTBOX_EVENT_EXITING or event == PTBOX_EVENT_SIGNAL:
 *             self._max_memory = get_memory(self.process.getpid())
 */

static int __pyx_f_6cptbox_7_cptbox_7Process__event_handler(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, int __pyx_v_event, unsigned long __pyx_v_param) {
  PyObject *__pyx_v_sys = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_event_handler", 0);
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif

  /* "cptbox/_cptbox.pyx":379
 * 
 *     cdef int _event_handler(self, int event, unsigned long param) nogil:
 *         if event == PTBOX_EVENT_EXITING or event == PTBOX_EVENT_SIGNAL:             # <<<<<<<<<<<<<<
 *             self._max_memory = get_memory(self.process.getpid())
 *         if event == PTBOX_EVENT_PROTECTION:
 */
  /*try:*/ {
    __pyx_t_2 = ((__pyx_v_event == PTBOX_EVENT_EXITING) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_event == PTBOX_EVENT_SIGNAL) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_1) {

      /* "cptbox/_cptbox.pyx":380
 *     cdef int _event_handler(self, int event, unsigned long param) nogil:
 *         if event == PTBOX_EVENT_EXITING or event == PTBOX_EVENT_SIGNAL:
 *             self._max_memory = get_memory(self.process.getpid())             # <<<<<<<<<<<<<<
 *         if event == PTBOX_EVENT_PROTECTION:
 *             with gil:
 */
      __pyx_v_self->_max_memory = __pyx_f_6cptbox_7_cptbox_get_memory(__pyx_v_self->process->getpid(), 0);

      /* "cptbox/_cptbox.pyx":379
 * 
 *     cdef int _event_handler(self, int event, unsigned long param) nogil:
 *         if event == PTBOX_EVENT_EXITING or event == PTBOX_EVENT_SIGNAL:             # <<<<<<<<<<<<<<
 *             self._max_memory = get_memory(self.process.getpid())
 *         if event == PTBOX_EVENT_PROTECTION:
 */
    }

    /* "cptbox/_cptbox.pyx":381
 *         if event == PTBOX_EVENT_EXITING or event == PTBOX_EVENT_SIGNAL:
 *             self._max_memory = get_memory(self.process.getpid())
 *         if event == PTBOX_EVENT_PROTECTION:             # <<<<<<<<<<<<<<
 *             with gil:
 *                 self._protection_fault(param)
 */
    __pyx_t_1 = ((__pyx_v_event == PTBOX_EVENT_PROTECTION) != 0);
    if (__pyx_t_1) {

      /* "cptbox/_cptbox.pyx":382
 *             self._max_memory = get_memory(self.process.getpid())
 *         if event == PTBOX_EVENT_PROTECTION:
 *             with gil:             # <<<<<<<<<<<<<<
 *                 self._protection_fault(param)
 *         if event == PTBOX_EVENT_SIGNAL and param == SIGXCPU:
 */
      {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          /*try:*/ {

            /* "cptbox/_cptbox.pyx":383
 *         if event == PTBOX_EVENT_PROTECTION:
 *             with gil:
 *                 self._protection_fault(param)             # <<<<<<<<<<<<<<
 *         if event == PTBOX_EVENT_SIGNAL and param == SIGXCPU:
 *             with gil:
 */
            __pyx_t_3 = __Pyx_PyInt_From_unsigned_long(__pyx_v_param); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L11_error;}
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_4 = ((struct __pyx_vtabstruct_6cptbox_7_cptbox_Process *)__pyx_v_self->__pyx_vtab)->_protection_fault(__pyx_v_self, __pyx_t_3, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L11_error;}
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }

          /* "cptbox/_cptbox.pyx":382
 *             self._max_memory = get_memory(self.process.getpid())
 *         if event == PTBOX_EVENT_PROTECTION:
 *             with gil:             # <<<<<<<<<<<<<<
 *                 self._protection_fault(param)
 *         if event == PTBOX_EVENT_SIGNAL and param == SIGXCPU:
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              goto __pyx_L12;
            }
            __pyx_L11_error: {
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              goto __pyx_L4_error;
            }
            __pyx_L12:;
          }
      }

      /* "cptbox/_cptbox.pyx":381
 *         if event == PTBOX_EVENT_EXITING or event == PTBOX_EVENT_SIGNAL:
 *             self._max_memory = get_memory(self.process.getpid())
 *         if event == PTBOX_EVENT_PROTECTION:             # <<<<<<<<<<<<<<
 *             with gil:
 *                 self._protection_fault(param)
 */
    }

    /* "cptbox/_cptbox.pyx":384
 *             with gil:
 *                 self._protection_fault(param)
 *         if event == PTBOX_EVENT_SIGNAL and param == SIGXCPU:             # <<<<<<<<<<<<<<
 *             with gil:
 *                 import sys
 */
    __pyx_t_2 = ((__pyx_v_event == PTBOX_EVENT_SIGNAL) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_param == SIGXCPU) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L14_bool_binop_done:;
    if (__pyx_t_1) {

      /* "cptbox/_cptbox.pyx":385
 *                 self._protection_fault(param)
 *         if event == PTBOX_EVENT_SIGNAL and param == SIGXCPU:
 *             with gil:             # <<<<<<<<<<<<<<
 *                 import sys
 *                 print>>sys.stderr, 'SIGXCPU in child'
 */
      {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          /*try:*/ {

            /* "cptbox/_cptbox.pyx":386
 *         if event == PTBOX_EVENT_SIGNAL and param == SIGXCPU:
 *             with gil:
 *                 import sys             # <<<<<<<<<<<<<<
 *                 print>>sys.stderr, 'SIGXCPU in child'
 *                 self._cpu_time_exceeded()
 */
            __pyx_t_4 = __Pyx_Import(__pyx_n_s_sys, 0, -1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L17_error;}
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_v_sys = __pyx_t_4;
            __pyx_t_4 = 0;

            /* "cptbox/_cptbox.pyx":387
 *             with gil:
 *                 import sys
 *                 print>>sys.stderr, 'SIGXCPU in child'             # <<<<<<<<<<<<<<
 *                 self._cpu_time_exceeded()
 *         return 0
 */
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_sys, __pyx_n_s_stderr); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L17_error;}
            __Pyx_GOTREF(__pyx_t_4);
            if (__Pyx_PrintOne(__pyx_t_4, __pyx_kp_s_SIGXCPU_in_child) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L17_error;}
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "cptbox/_cptbox.pyx":388
 *                 import sys
 *                 print>>sys.stderr, 'SIGXCPU in child'
 *                 self._cpu_time_exceeded()             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
            __pyx_t_4 = ((struct __pyx_vtabstruct_6cptbox_7_cptbox_Process *)__pyx_v_self->__pyx_vtab)->_cpu_time_exceeded(__pyx_v_self, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L17_error;}
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }

          /* "cptbox/_cptbox.pyx":385
 *                 self._protection_fault(param)
 *         if event == PTBOX_EVENT_SIGNAL and param == SIGXCPU:
 *             with gil:             # <<<<<<<<<<<<<<
 *                 import sys
 *                 print>>sys.stderr, 'SIGXCPU in child'
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              goto __pyx_L18;
            }
            __pyx_L17_error: {
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              goto __pyx_L4_error;
            }
            __pyx_L18:;
          }
      }

      /* "cptbox/_cptbox.pyx":384
 *             with gil:
 *                 self._protection_fault(param)
 *         if event == PTBOX_EVENT_SIGNAL and param == SIGXCPU:             # <<<<<<<<<<<<<<
 *             with gil:
 *                 import sys
 */
    }

    /* "cptbox/_cptbox.pyx":389
 *                 print>>sys.stderr, 'SIGXCPU in child'
 *                 self._cpu_time_exceeded()
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     cpdef _handler(self, syscall, handler):
 */
    __pyx_r = 0;
    goto __pyx_L3_return;
  }

  /* "cptbox/_cptbox.pyx":379
 * 
 *     cdef int _event_handler(self, int event, unsigned long param) nogil:
 *         if event == PTBOX_EVENT_EXITING or event == PTBOX_EVENT_SIGNAL:             # <<<<<<<<<<<<<<
 *             self._max_memory = get_memory(self.process.getpid())
 *         if event == PTBOX_EVENT_PROTECTION:
 */
  /*finally:*/ {
    __pyx_L3_return: {
      #ifdef WITH_THREAD
      __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      goto __pyx_L0;
    }
    __pyx_L4_error: {
      #ifdef WITH_THREAD
      __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      goto __pyx_L1_error;
    }
  }

  /* "cptbox/_cptbox.pyx":378
 *         return self._callback(syscall)
 * 
 *     cdef int _event_handler(self, int event, unsigned long param) nogil:             # <<<<<<<<<<<<<<
 *         if event == PTBOX_EVENT_EXITING or event == PTBOX_EVENT_SIGNAL:
 *             self._max_memory = get_memory(self.process.getpid())
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("cptbox._cptbox.Process._event_handler", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sys);
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":391
 *         return 0
 * 
 *     cpdef _handler(self, syscall, handler):             # <<<<<<<<<<<<<<
 *         self.process.set_handler(syscall, handler)
 * 
 */

static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_7_handler(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_6cptbox_7_cptbox_7Process__handler(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_syscall, PyObject *__pyx_v_handler, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_handler", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_handler); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6cptbox_7_cptbox_7Process_7_handler)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_syscall);
      __Pyx_GIVEREF(__pyx_v_syscall);
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_syscall);
      __Pyx_INCREF(__pyx_v_handler);
      __Pyx_GIVEREF(__pyx_v_handler);
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_handler);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "cptbox/_cptbox.pyx":392
 * 
 *     cpdef _handler(self, syscall, handler):
 *         self.process.set_handler(syscall, handler)             # <<<<<<<<<<<<<<
 * 
 *     cpdef _protection_fault(self, syscall):
 */
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_syscall); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_handler); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->process->set_handler(__pyx_t_7, __pyx_t_8);

  /* "cptbox/_cptbox.pyx":391
 *         return 0
 * 
 *     cpdef _handler(self, syscall, handler):             # <<<<<<<<<<<<<<
 *         self.process.set_handler(syscall, handler)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cptbox._cptbox.Process._handler", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_7_handler(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_7_handler(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_syscall = 0;
  PyObject *__pyx_v_handler = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_handler (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_syscall,&__pyx_n_s_handler_2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_syscall)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handler_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_handler", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_handler") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_syscall = values[0];
    __pyx_v_handler = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_handler", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cptbox._cptbox.Process._handler", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_6_handler(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self), __pyx_v_syscall, __pyx_v_handler);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_6_handler(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_syscall, PyObject *__pyx_v_handler) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_handler", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6cptbox_7_cptbox_7Process__handler(__pyx_v_self, __pyx_v_syscall, __pyx_v_handler, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Process._handler", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":394
 *         self.process.set_handler(syscall, handler)
 * 
 *     cpdef _protection_fault(self, syscall):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_9_protection_fault(PyObject *__pyx_v_self, PyObject *__pyx_v_syscall); /*proto*/
static PyObject *__pyx_f_6cptbox_7_cptbox_7Process__protection_fault(CYTHON_UNUSED struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_syscall, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_protection_fault", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_protection_fault); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6cptbox_7_cptbox_7Process_9_protection_fault)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_syscall); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_syscall);
        __Pyx_GIVEREF(__pyx_v_syscall);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_syscall);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "cptbox/_cptbox.pyx":395
 * 
 *     cpdef _protection_fault(self, syscall):
 *         pass             # <<<<<<<<<<<<<<
 * 
 *     cpdef _cpu_time_exceeded(self):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cptbox._cptbox.Process._protection_fault", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":394
 *         self.process.set_handler(syscall, handler)
 * 
 *     cpdef _protection_fault(self, syscall):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_9_protection_fault(PyObject *__pyx_v_self, PyObject *__pyx_v_syscall); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_9_protection_fault(PyObject *__pyx_v_self, PyObject *__pyx_v_syscall) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_protection_fault (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_8_protection_fault(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self), ((PyObject *)__pyx_v_syscall));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_8_protection_fault(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_syscall) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_protection_fault", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6cptbox_7_cptbox_7Process__protection_fault(__pyx_v_self, __pyx_v_syscall, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Process._protection_fault", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":397
 *         pass
 * 
 *     cpdef _cpu_time_exceeded(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_11_cpu_time_exceeded(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_6cptbox_7_cptbox_7Process__cpu_time_exceeded(CYTHON_UNUSED struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_cpu_time_exceeded", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cpu_time_exceeded); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6cptbox_7_cptbox_7Process_11_cpu_time_exceeded)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "cptbox/_cptbox.pyx":398
 * 
 *     cpdef _cpu_time_exceeded(self):
 *         pass             # <<<<<<<<<<<<<<
 * 
 *     cpdef _spawn(self, file, args, env=(), chdir='', fds=None):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cptbox._cptbox.Process._cpu_time_exceeded", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":397
 *         pass
 * 
 *     cpdef _cpu_time_exceeded(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_11_cpu_time_exceeded(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_11_cpu_time_exceeded(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_cpu_time_exceeded (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_10_cpu_time_exceeded(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_10_cpu_time_exceeded(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_cpu_time_exceeded", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6cptbox_7_cptbox_7Process__cpu_time_exceeded(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Process._cpu_time_exceeded", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":400
 *         pass
 * 
 *     cpdef _spawn(self, file, args, env=(), chdir='', fds=None):             # <<<<<<<<<<<<<<
 *         cdef child_config config
 *         config.address_space = self._child_address
 */

static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_13_spawn(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_6cptbox_7_cptbox_7Process__spawn(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_file, PyObject *__pyx_v_args, int __pyx_skip_dispatch, struct __pyx_opt_args_6cptbox_7_cptbox_7Process__spawn *__pyx_optional_args) {
  PyObject *__pyx_v_env = ((PyObject *)__pyx_empty_tuple);
  PyObject *__pyx_v_chdir = ((PyObject *)__pyx_kp_s__2);
  PyObject *__pyx_v_fds = ((PyObject *)Py_None);
  struct __pyx_t_6cptbox_7_cptbox_child_config __pyx_v_config;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  unsigned long __pyx_t_7;
  unsigned int __pyx_t_8;
  int __pyx_t_9;
  char *__pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_spawn", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_env = __pyx_optional_args->env;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_chdir = __pyx_optional_args->chdir;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_fds = __pyx_optional_args->fds;
        }
      }
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_spawn); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6cptbox_7_cptbox_7Process_13_spawn)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      __pyx_t_6 = PyTuple_New(5+__pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_file);
      __Pyx_GIVEREF(__pyx_v_file);
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_file);
      __Pyx_INCREF(__pyx_v_args);
      __Pyx_GIVEREF(__pyx_v_args);
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_args);
      __Pyx_INCREF(__pyx_v_env);
      __Pyx_GIVEREF(__pyx_v_env);
      PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_v_env);
      __Pyx_INCREF(__pyx_v_chdir);
      __Pyx_GIVEREF(__pyx_v_chdir);
      PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_v_chdir);
      __Pyx_INCREF(__pyx_v_fds);
      __Pyx_GIVEREF(__pyx_v_fds);
      PyTuple_SET_ITEM(__pyx_t_6, 4+__pyx_t_5, __pyx_v_fds);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "cptbox/_cptbox.pyx":402
 *     cpdef _spawn(self, file, args, env=(), chdir='', fds=None):
 *         cdef child_config config
 *         config.address_space = self._child_address             # <<<<<<<<<<<<<<
 *         config.memory = self._child_memory
 *         config.cpu_time = self._cpu_time
 */
  __pyx_t_7 = __pyx_v_self->_child_address;
  __pyx_v_config.address_space = __pyx_t_7;

  /* "cptbox/_cptbox.pyx":403
 *         cdef child_config config
 *         config.address_space = self._child_address
 *         config.memory = self._child_memory             # <<<<<<<<<<<<<<
 *         config.cpu_time = self._cpu_time
 *         config.nproc = self._nproc
 */
  __pyx_t_7 = __pyx_v_self->_child_memory;
  __pyx_v_config.memory = __pyx_t_7;

  /* "cptbox/_cptbox.pyx":404
 *         config.address_space = self._child_address
 *         config.memory = self._child_memory
 *         config.cpu_time = self._cpu_time             # <<<<<<<<<<<<<<
 *         config.nproc = self._nproc
 *         config.file = file
 */
  __pyx_t_8 = __pyx_v_self->_cpu_time;
  __pyx_v_config.cpu_time = __pyx_t_8;

  /* "cptbox/_cptbox.pyx":405
 *         config.memory = self._child_memory
 *         config.cpu_time = self._cpu_time
 *         config.nproc = self._nproc             # <<<<<<<<<<<<<<
 *         config.file = file
 *         config.dir = chdir
 */
  __pyx_t_9 = __pyx_v_self->_nproc;
  __pyx_v_config.nproc = __pyx_t_9;

  /* "cptbox/_cptbox.pyx":406
 *         config.cpu_time = self._cpu_time
 *         config.nproc = self._nproc
 *         config.file = file             # <<<<<<<<<<<<<<
 *         config.dir = chdir
 *         config.stdin = self._child_stdin
 */
  __pyx_t_10 = __Pyx_PyObject_AsString(__pyx_v_file); if (unlikely((!__pyx_t_10) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_config.file = __pyx_t_10;

  /* "cptbox/_cptbox.pyx":407
 *         config.nproc = self._nproc
 *         config.file = file
 *         config.dir = chdir             # <<<<<<<<<<<<<<
 *         config.stdin = self._child_stdin
 *         config.stdout = self._child_stdout
 */
  __pyx_t_10 = __Pyx_PyObject_AsString(__pyx_v_chdir); if (unlikely((!__pyx_t_10) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_config.dir = __pyx_t_10;

  /* "cptbox/_cptbox.pyx":408
 *         config.file = file
 *         config.dir = chdir
 *         config.stdin = self._child_stdin             # <<<<<<<<<<<<<<
 *         config.stdout = self._child_stdout
 *         config.stderr = self._child_stderr
 */
  __pyx_t_9 = __pyx_v_self->_child_stdin;
  __pyx_v_config.stdin = __pyx_t_9;

  /* "cptbox/_cptbox.pyx":409
 *         config.dir = chdir
 *         config.stdin = self._child_stdin
 *         config.stdout = self._child_stdout             # <<<<<<<<<<<<<<
 *         config.stderr = self._child_stderr
 *         config.argv = alloc_string_array(args)
 */
  __pyx_t_9 = __pyx_v_self->_child_stdout;
  __pyx_v_config.stdout = __pyx_t_9;

  /* "cptbox/_cptbox.pyx":410
 *         config.stdin = self._child_stdin
 *         config.stdout = self._child_stdout
 *         config.stderr = self._child_stderr             # <<<<<<<<<<<<<<
 *         config.argv = alloc_string_array(args)
 *         config.envp = alloc_string_array(env)
 */
  __pyx_t_9 = __pyx_v_self->_child_stderr;
  __pyx_v_config.stderr = __pyx_t_9;

  /* "cptbox/_cptbox.pyx":411
 *         config.stdout = self._child_stdout
 *         config.stderr = self._child_stderr
 *         config.argv = alloc_string_array(args)             # <<<<<<<<<<<<<<
 *         config.envp = alloc_string_array(env)
 *         if fds is None or not len(fds):
 */
  __pyx_v_config.argv = __pyx_f_6cptbox_7_cptbox_alloc_string_array(__pyx_v_args);

  /* "cptbox/_cptbox.pyx":412
 *         config.stderr = self._child_stderr
 *         config.argv = alloc_string_array(args)
 *         config.envp = alloc_string_array(env)             # <<<<<<<<<<<<<<
 *         if fds is None or not len(fds):
 *             config.max_fd = 2
 */
  __pyx_v_config.envp = __pyx_f_6cptbox_7_cptbox_alloc_string_array(__pyx_v_env);

  /* "cptbox/_cptbox.pyx":413
 *         config.argv = alloc_string_array(args)
 *         config.envp = alloc_string_array(env)
 *         if fds is None or not len(fds):             # <<<<<<<<<<<<<<
 *             config.max_fd = 2
 *             config.fds = NULL
 */
  __pyx_t_12 = (__pyx_v_fds == Py_None);
  __pyx_t_13 = (__pyx_t_12 != 0);
  if (!__pyx_t_13) {
  } else {
    __pyx_t_11 = __pyx_t_13;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = PyObject_Length(__pyx_v_fds); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_13 = ((!(__pyx_t_5 != 0)) != 0);
  __pyx_t_11 = __pyx_t_13;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_11) {

    /* "cptbox/_cptbox.pyx":414
 *         config.envp = alloc_string_array(env)
 *         if fds is None or not len(fds):
 *             config.max_fd = 2             # <<<<<<<<<<<<<<
 *             config.fds = NULL
 *         else:
 */
    __pyx_v_config.max_fd = 2;

    /* "cptbox/_cptbox.pyx":415
 *         if fds is None or not len(fds):
 *             config.max_fd = 2
 *             config.fds = NULL             # <<<<<<<<<<<<<<
 *         else:
 *             config.max_fd = 2 + len(fds)
 */
    __pyx_v_config.fds = NULL;

    /* "cptbox/_cptbox.pyx":413
 *         config.argv = alloc_string_array(args)
 *         config.envp = alloc_string_array(env)
 *         if fds is None or not len(fds):             # <<<<<<<<<<<<<<
 *             config.max_fd = 2
 *             config.fds = NULL
 */
    goto __pyx_L3;
  }

  /* "cptbox/_cptbox.pyx":417
 *             config.fds = NULL
 *         else:
 *             config.max_fd = 2 + len(fds)             # <<<<<<<<<<<<<<
 *             config.fds = <int*>malloc(sizeof(int) * len(fds))
 *             for i in xrange(len(fds)):
 */
  /*else*/ {
    __pyx_t_5 = PyObject_Length(__pyx_v_fds); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_config.max_fd = (2 + __pyx_t_5);

    /* "cptbox/_cptbox.pyx":418
 *         else:
 *             config.max_fd = 2 + len(fds)
 *             config.fds = <int*>malloc(sizeof(int) * len(fds))             # <<<<<<<<<<<<<<
 *             for i in xrange(len(fds)):
 *                 config.fds[i] = fds[i]
 */
    __pyx_t_5 = PyObject_Length(__pyx_v_fds); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_config.fds = ((int *)malloc(((sizeof(int)) * __pyx_t_5)));

    /* "cptbox/_cptbox.pyx":419
 *             config.max_fd = 2 + len(fds)
 *             config.fds = <int*>malloc(sizeof(int) * len(fds))
 *             for i in xrange(len(fds)):             # <<<<<<<<<<<<<<
 *                 config.fds[i] = fds[i]
 *         with nogil:
 */
    __pyx_t_5 = PyObject_Length(__pyx_v_fds); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_5; __pyx_t_14+=1) {
      __pyx_v_i = __pyx_t_14;

      /* "cptbox/_cptbox.pyx":420
 *             config.fds = <int*>malloc(sizeof(int) * len(fds))
 *             for i in xrange(len(fds)):
 *                 config.fds[i] = fds[i]             # <<<<<<<<<<<<<<
 *         with nogil:
 *             if self.process.spawn(pt_child, &config):
 */
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_fds, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      (__pyx_v_config.fds[__pyx_v_i]) = __pyx_t_9;
    }
  }
  __pyx_L3:;

  /* "cptbox/_cptbox.pyx":421
 *             for i in xrange(len(fds)):
 *                 config.fds[i] = fds[i]
 *         with nogil:             # <<<<<<<<<<<<<<
 *             if self.process.spawn(pt_child, &config):
 *                 with gil:
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "cptbox/_cptbox.pyx":422
 *                 config.fds[i] = fds[i]
 *         with nogil:
 *             if self.process.spawn(pt_child, &config):             # <<<<<<<<<<<<<<
 *                 with gil:
 *                     raise RuntimeError('Failed to spawn child')
 */
        __pyx_t_11 = (__pyx_v_self->process->spawn(__pyx_f_6cptbox_7_cptbox_pt_child, (&__pyx_v_config)) != 0);
        if (__pyx_t_11) {

          /* "cptbox/_cptbox.pyx":423
 *         with nogil:
 *             if self.process.spawn(pt_child, &config):
 *                 with gil:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError('Failed to spawn child')
 *         free(config.argv)
 */
          {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              /*try:*/ {

                /* "cptbox/_cptbox.pyx":424
 *             if self.process.spawn(pt_child, &config):
 *                 with gil:
 *                     raise RuntimeError('Failed to spawn child')             # <<<<<<<<<<<<<<
 *         free(config.argv)
 *         free(config.envp)
 */
                __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_Raise(__pyx_t_1, 0, 0, 0);
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
              }

              /* "cptbox/_cptbox.pyx":423
 *         with nogil:
 *             if self.process.spawn(pt_child, &config):
 *                 with gil:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError('Failed to spawn child')
 *         free(config.argv)
 */
              /*finally:*/ {
                __pyx_L13_error: {
                  #ifdef WITH_THREAD
                  PyGILState_Release(__pyx_gilstate_save);
                  #endif
                  goto __pyx_L9_error;
                }
              }
          }

          /* "cptbox/_cptbox.pyx":422
 *                 config.fds[i] = fds[i]
 *         with nogil:
 *             if self.process.spawn(pt_child, &config):             # <<<<<<<<<<<<<<
 *                 with gil:
 *                     raise RuntimeError('Failed to spawn child')
 */
        }
      }

      /* "cptbox/_cptbox.pyx":421
 *             for i in xrange(len(fds)):
 *                 config.fds[i] = fds[i]
 *         with nogil:             # <<<<<<<<<<<<<<
 *             if self.process.spawn(pt_child, &config):
 *                 with gil:
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L10;
        }
        __pyx_L9_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L10:;
      }
  }

  /* "cptbox/_cptbox.pyx":425
 *                 with gil:
 *                     raise RuntimeError('Failed to spawn child')
 *         free(config.argv)             # <<<<<<<<<<<<<<
 *         free(config.envp)
 * 
 */
  free(__pyx_v_config.argv);

  /* "cptbox/_cptbox.pyx":426
 *                     raise RuntimeError('Failed to spawn child')
 *         free(config.argv)
 *         free(config.envp)             # <<<<<<<<<<<<<<
 * 
 *     cpdef _monitor(self):
 */
  free(__pyx_v_config.envp);

  /* "cptbox/_cptbox.pyx":400
 *         pass
 * 
 *     cpdef _spawn(self, file, args, env=(), chdir='', fds=None):             # <<<<<<<<<<<<<<
 *         cdef child_config config
 *         config.address_space = self._child_address
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cptbox._cptbox.Process._spawn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_13_spawn(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_13_spawn(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_env = 0;
  PyObject *__pyx_v_chdir = 0;
  PyObject *__pyx_v_fds = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_spawn (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_file,&__pyx_n_s_args,&__pyx_n_s_env,&__pyx_n_s_chdir,&__pyx_n_s_fds,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[2] = ((PyObject *)__pyx_empty_tuple);
    values[3] = ((PyObject *)__pyx_kp_s__2);
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_args)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_spawn", 0, 2, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_env);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_chdir);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fds);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_spawn") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_file = values[0];
    __pyx_v_args = values[1];
    __pyx_v_env = values[2];
    __pyx_v_chdir = values[3];
    __pyx_v_fds = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_spawn", 0, 2, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cptbox._cptbox.Process._spawn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_12_spawn(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self), __pyx_v_file, __pyx_v_args, __pyx_v_env, __pyx_v_chdir, __pyx_v_fds);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_12_spawn(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_file, PyObject *__pyx_v_args, PyObject *__pyx_v_env, PyObject *__pyx_v_chdir, PyObject *__pyx_v_fds) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6cptbox_7_cptbox_7Process__spawn __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_spawn", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 3;
  __pyx_t_2.env = __pyx_v_env;
  __pyx_t_2.chdir = __pyx_v_chdir;
  __pyx_t_2.fds = __pyx_v_fds;
  __pyx_t_1 = __pyx_vtabptr_6cptbox_7_cptbox_Process->_spawn(__pyx_v_self, __pyx_v_file, __pyx_v_args, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Process._spawn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":428
 *         free(config.envp)
 * 
 *     cpdef _monitor(self):             # <<<<<<<<<<<<<<
 *         cdef int exitcode
 *         with nogil:
 */

static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_15_monitor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_6cptbox_7_cptbox_7Process__monitor(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_v_exitcode;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_monitor", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_monitor); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6cptbox_7_cptbox_7Process_15_monitor)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "cptbox/_cptbox.pyx":430
 *     cpdef _monitor(self):
 *         cdef int exitcode
 *         with nogil:             # <<<<<<<<<<<<<<
 *             exitcode = self.process.monitor()
 *         self._exitcode = exitcode
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "cptbox/_cptbox.pyx":431
 *         cdef int exitcode
 *         with nogil:
 *             exitcode = self.process.monitor()             # <<<<<<<<<<<<<<
 *         self._exitcode = exitcode
 *         self._exited = True
 */
        __pyx_v_exitcode = __pyx_v_self->process->monitor();
      }

      /* "cptbox/_cptbox.pyx":430
 *     cpdef _monitor(self):
 *         cdef int exitcode
 *         with nogil:             # <<<<<<<<<<<<<<
 *             exitcode = self.process.monitor()
 *         self._exitcode = exitcode
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cptbox/_cptbox.pyx":432
 *         with nogil:
 *             exitcode = self.process.monitor()
 *         self._exitcode = exitcode             # <<<<<<<<<<<<<<
 *         self._exited = True
 *         return self._exitcode
 */
  __pyx_v_self->_exitcode = __pyx_v_exitcode;

  /* "cptbox/_cptbox.pyx":433
 *             exitcode = self.process.monitor()
 *         self._exitcode = exitcode
 *         self._exited = True             # <<<<<<<<<<<<<<
 *         return self._exitcode
 * 
 */
  __pyx_v_self->_exited = 1;

  /* "cptbox/_cptbox.pyx":434
 *         self._exitcode = exitcode
 *         self._exited = True
 *         return self._exitcode             # <<<<<<<<<<<<<<
 * 
 *     property pid:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_exitcode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 434; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":428
 *         free(config.envp)
 * 
 *     cpdef _monitor(self):             # <<<<<<<<<<<<<<
 *         cdef int exitcode
 *         with nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cptbox._cptbox.Process._monitor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_15_monitor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_15_monitor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_monitor (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_14_monitor(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_14_monitor(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_monitor", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6cptbox_7_cptbox_7Process__monitor(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Process._monitor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":437
 * 
 *     property pid:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.process.getpid()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_3pid_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_3pid_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_3pid___get__(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_3pid___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cptbox/_cptbox.pyx":438
 *     property pid:
 *         def __get__(self):
 *             return self.process.getpid()             # <<<<<<<<<<<<<<
 * 
 *     property execution_time:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->process->getpid()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":437
 * 
 *     property pid:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.process.getpid()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Process.pid.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":441
 * 
 *     property execution_time:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.process.execution_time()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_14execution_time_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_14execution_time_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_14execution_time___get__(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_14execution_time___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cptbox/_cptbox.pyx":442
 *     property execution_time:
 *         def __get__(self):
 *             return self.process.execution_time()             # <<<<<<<<<<<<<<
 * 
 *     property cpu_time:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->process->execution_time()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":441
 * 
 *     property execution_time:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.process.execution_time()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Process.execution_time.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":445
 * 
 *     property cpu_time:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef const rusage *usage = self.process.getrusage()
 *             return usage.ru_utime.tv_sec + usage.ru_utime.tv_usec / 1000000.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_8cpu_time_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_8cpu_time_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_8cpu_time___get__(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_8cpu_time___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  struct rusage const *__pyx_v_usage;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cptbox/_cptbox.pyx":446
 *     property cpu_time:
 *         def __get__(self):
 *             cdef const rusage *usage = self.process.getrusage()             # <<<<<<<<<<<<<<
 *             return usage.ru_utime.tv_sec + usage.ru_utime.tv_usec / 1000000.
 * 
 */
  __pyx_v_usage = __pyx_v_self->process->getrusage();

  /* "cptbox/_cptbox.pyx":447
 *         def __get__(self):
 *             cdef const rusage *usage = self.process.getrusage()
 *             return usage.ru_utime.tv_sec + usage.ru_utime.tv_usec / 1000000.             # <<<<<<<<<<<<<<
 * 
 *     property max_memory:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_usage->ru_utime.tv_sec + (__pyx_v_usage->ru_utime.tv_usec / 1000000.))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":445
 * 
 *     property cpu_time:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef const rusage *usage = self.process.getrusage()
 *             return usage.ru_utime.tv_sec + usage.ru_utime.tv_usec / 1000000.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Process.cpu_time.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":450
 * 
 *     property max_memory:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._exited:
 *                 return self._max_memory
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_10max_memory_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_10max_memory_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_10max_memory___get__(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_10max_memory___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  unsigned long __pyx_v_memory;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cptbox/_cptbox.pyx":451
 *     property max_memory:
 *         def __get__(self):
 *             if self._exited:             # <<<<<<<<<<<<<<
 *                 return self._max_memory
 *             cdef unsigned long memory = get_memory(self.process.getpid())
 */
  __pyx_t_1 = (__pyx_v_self->_exited != 0);
  if (__pyx_t_1) {

    /* "cptbox/_cptbox.pyx":452
 *         def __get__(self):
 *             if self._exited:
 *                 return self._max_memory             # <<<<<<<<<<<<<<
 *             cdef unsigned long memory = get_memory(self.process.getpid())
 *             if memory > 0:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->_max_memory); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 452; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "cptbox/_cptbox.pyx":451
 *     property max_memory:
 *         def __get__(self):
 *             if self._exited:             # <<<<<<<<<<<<<<
 *                 return self._max_memory
 *             cdef unsigned long memory = get_memory(self.process.getpid())
 */
  }

  /* "cptbox/_cptbox.pyx":453
 *             if self._exited:
 *                 return self._max_memory
 *             cdef unsigned long memory = get_memory(self.process.getpid())             # <<<<<<<<<<<<<<
 *             if memory > 0:
 *                 self._max_memory = memory
 */
  __pyx_v_memory = __pyx_f_6cptbox_7_cptbox_get_memory(__pyx_v_self->process->getpid(), 0);

  /* "cptbox/_cptbox.pyx":454
 *                 return self._max_memory
 *             cdef unsigned long memory = get_memory(self.process.getpid())
 *             if memory > 0:             # <<<<<<<<<<<<<<
 *                 self._max_memory = memory
 *             return self._max_memory
 */
  __pyx_t_1 = ((__pyx_v_memory > 0) != 0);
  if (__pyx_t_1) {

    /* "cptbox/_cptbox.pyx":455
 *             cdef unsigned long memory = get_memory(self.process.getpid())
 *             if memory > 0:
 *                 self._max_memory = memory             # <<<<<<<<<<<<<<
 *             return self._max_memory
 * 
 */
    __pyx_v_self->_max_memory = __pyx_v_memory;

    /* "cptbox/_cptbox.pyx":454
 *                 return self._max_memory
 *             cdef unsigned long memory = get_memory(self.process.getpid())
 *             if memory > 0:             # <<<<<<<<<<<<<<
 *                 self._max_memory = memory
 *             return self._max_memory
 */
  }

  /* "cptbox/_cptbox.pyx":456
 *             if memory > 0:
 *                 self._max_memory = memory
 *             return self._max_memory             # <<<<<<<<<<<<<<
 * 
 *     property returncode:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->_max_memory); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":450
 * 
 *     property max_memory:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._exited:
 *                 return self._max_memory
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cptbox._cptbox.Process.max_memory.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":459
 * 
 *     property returncode:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if not self._exited:
 *                 return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_10returncode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_10returncode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_10returncode___get__(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_10returncode___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cptbox/_cptbox.pyx":460
 *     property returncode:
 *         def __get__(self):
 *             if not self._exited:             # <<<<<<<<<<<<<<
 *                 return None
 *             return self._exitcode
 */
  __pyx_t_1 = ((!(__pyx_v_self->_exited != 0)) != 0);
  if (__pyx_t_1) {

    /* "cptbox/_cptbox.pyx":461
 *         def __get__(self):
 *             if not self._exited:
 *                 return None             # <<<<<<<<<<<<<<
 *             return self._exitcode
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "cptbox/_cptbox.pyx":460
 *     property returncode:
 *         def __get__(self):
 *             if not self._exited:             # <<<<<<<<<<<<<<
 *                 return None
 *             return self._exitcode
 */
  }

  /* "cptbox/_cptbox.pyx":462
 *             if not self._exited:
 *                 return None
 *             return self._exitcode             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_exitcode); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cptbox/_cptbox.pyx":459
 * 
 *     property returncode:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if not self._exited:
 *                 return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cptbox._cptbox.Process.returncode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":341
 *     cdef pt_debugger *_debugger
 *     cdef pt_process *process
 *     cdef public Debugger debugger             # <<<<<<<<<<<<<<
 *     cdef readonly bint _exited
 *     cdef readonly int _exitcode
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_8debugger_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_8debugger_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_8debugger___get__(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_8debugger___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->debugger));
  __pyx_r = ((PyObject *)__pyx_v_self->debugger);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6cptbox_7_cptbox_7Process_8debugger_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6cptbox_7_cptbox_7Process_8debugger_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_8debugger_2__set__(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6cptbox_7_cptbox_7Process_8debugger_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_6cptbox_7_cptbox_Debugger))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->debugger);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->debugger));
  __pyx_v_self->debugger = ((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Process.debugger.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6cptbox_7_cptbox_7Process_8debugger_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6cptbox_7_cptbox_7Process_8debugger_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_8debugger_4__del__(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6cptbox_7_cptbox_7Process_8debugger_4__del__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->debugger);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->debugger));
  __pyx_v_self->debugger = ((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":342
 *     cdef pt_process *process
 *     cdef public Debugger debugger
 *     cdef readonly bint _exited             # <<<<<<<<<<<<<<
 *     cdef readonly int _exitcode
 *     cdef public int _child_stdin, _child_stdout, _child_stderr
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_7_exited_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_7_exited_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_7_exited___get__(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_7_exited___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_exited); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Process._exited.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":343
 *     cdef public Debugger debugger
 *     cdef readonly bint _exited
 *     cdef readonly int _exitcode             # <<<<<<<<<<<<<<
 *     cdef public int _child_stdin, _child_stdout, _child_stderr
 *     cdef public unsigned long _child_memory, _child_address
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_9_exitcode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_9_exitcode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_9_exitcode___get__(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_9_exitcode___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_exitcode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Process._exitcode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":344
 *     cdef readonly bint _exited
 *     cdef readonly int _exitcode
 *     cdef public int _child_stdin, _child_stdout, _child_stderr             # <<<<<<<<<<<<<<
 *     cdef public unsigned long _child_memory, _child_address
 *     cdef public unsigned int _cpu_time
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_12_child_stdin_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_12_child_stdin_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_12_child_stdin___get__(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_12_child_stdin___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_child_stdin); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Process._child_stdin.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6cptbox_7_cptbox_7Process_12_child_stdin_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6cptbox_7_cptbox_7Process_12_child_stdin_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_12_child_stdin_2__set__(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6cptbox_7_cptbox_7Process_12_child_stdin_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->_child_stdin = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cptbox._cptbox.Process._child_stdin.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_13_child_stdout_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_13_child_stdout_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_13_child_stdout___get__(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_13_child_stdout___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_child_stdout); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Process._child_stdout.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6cptbox_7_cptbox_7Process_13_child_stdout_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6cptbox_7_cptbox_7Process_13_child_stdout_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_13_child_stdout_2__set__(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6cptbox_7_cptbox_7Process_13_child_stdout_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->_child_stdout = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cptbox._cptbox.Process._child_stdout.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_13_child_stderr_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_13_child_stderr_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_13_child_stderr___get__(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_13_child_stderr___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_child_stderr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Process._child_stderr.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6cptbox_7_cptbox_7Process_13_child_stderr_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6cptbox_7_cptbox_7Process_13_child_stderr_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_13_child_stderr_2__set__(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6cptbox_7_cptbox_7Process_13_child_stderr_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->_child_stderr = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cptbox._cptbox.Process._child_stderr.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":345
 *     cdef readonly int _exitcode
 *     cdef public int _child_stdin, _child_stdout, _child_stderr
 *     cdef public unsigned long _child_memory, _child_address             # <<<<<<<<<<<<<<
 *     cdef public unsigned int _cpu_time
 *     cdef public int _nproc
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_13_child_memory_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_13_child_memory_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_13_child_memory___get__(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_13_child_memory___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->_child_memory); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Process._child_memory.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6cptbox_7_cptbox_7Process_13_child_memory_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6cptbox_7_cptbox_7Process_13_child_memory_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_13_child_memory_2__set__(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6cptbox_7_cptbox_7Process_13_child_memory_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->_child_memory = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cptbox._cptbox.Process._child_memory.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_14_child_address_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_14_child_address_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_14_child_address___get__(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_14_child_address___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->_child_address); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Process._child_address.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6cptbox_7_cptbox_7Process_14_child_address_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6cptbox_7_cptbox_7Process_14_child_address_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_14_child_address_2__set__(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6cptbox_7_cptbox_7Process_14_child_address_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->_child_address = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cptbox._cptbox.Process._child_address.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":346
 *     cdef public int _child_stdin, _child_stdout, _child_stderr
 *     cdef public unsigned long _child_memory, _child_address
 *     cdef public unsigned int _cpu_time             # <<<<<<<<<<<<<<
 *     cdef public int _nproc
 *     cdef unsigned long _max_memory
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_9_cpu_time_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_9_cpu_time_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_9_cpu_time___get__(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_9_cpu_time___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_cpu_time); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Process._cpu_time.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6cptbox_7_cptbox_7Process_9_cpu_time_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6cptbox_7_cptbox_7Process_9_cpu_time_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_9_cpu_time_2__set__(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6cptbox_7_cptbox_7Process_9_cpu_time_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->_cpu_time = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cptbox._cptbox.Process._cpu_time.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cptbox/_cptbox.pyx":347
 *     cdef public unsigned long _child_memory, _child_address
 *     cdef public unsigned int _cpu_time
 *     cdef public int _nproc             # <<<<<<<<<<<<<<
 *     cdef unsigned long _max_memory
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_6_nproc_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6cptbox_7_cptbox_7Process_6_nproc_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_6_nproc___get__(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cptbox_7_cptbox_7Process_6_nproc___get__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_nproc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cptbox._cptbox.Process._nproc.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6cptbox_7_cptbox_7Process_6_nproc_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6cptbox_7_cptbox_7Process_6_nproc_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6cptbox_7_cptbox_7Process_6_nproc_2__set__(((struct __pyx_obj_6cptbox_7_cptbox_Process *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6cptbox_7_cptbox_7Process_6_nproc_2__set__(struct __pyx_obj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->_nproc = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cptbox._cptbox.Process._nproc.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_6cptbox_7_cptbox_Debugger __pyx_vtable_6cptbox_7_cptbox_Debugger;

static PyObject *__pyx_tp_new_6cptbox_7_cptbox_Debugger(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6cptbox_7_cptbox_Debugger *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)o);
  p->__pyx_vtab = __pyx_vtabptr_6cptbox_7_cptbox_Debugger;
  p->on_return_callback = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6cptbox_7_cptbox_Debugger(PyObject *o) {
  struct __pyx_obj_6cptbox_7_cptbox_Debugger *p = (struct __pyx_obj_6cptbox_7_cptbox_Debugger *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->on_return_callback);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6cptbox_7_cptbox_Debugger(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6cptbox_7_cptbox_Debugger *p = (struct __pyx_obj_6cptbox_7_cptbox_Debugger *)o;
  if (p->on_return_callback) {
    e = (*v)(p->on_return_callback, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6cptbox_7_cptbox_Debugger(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6cptbox_7_cptbox_Debugger *p = (struct __pyx_obj_6cptbox_7_cptbox_Debugger *)o;
  tmp = ((PyObject*)p->on_return_callback);
  p->on_return_callback = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_8Debugger_getpid_syscall(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_8Debugger_14getpid_syscall_1__get__(o);
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_8Debugger_syscall(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_8Debugger_7syscall_1__get__(o);
}

static int __pyx_setprop_6cptbox_7_cptbox_8Debugger_syscall(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6cptbox_7_cptbox_8Debugger_7syscall_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_8Debugger_result(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_8Debugger_6result_1__get__(o);
}

static int __pyx_setprop_6cptbox_7_cptbox_8Debugger_result(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6cptbox_7_cptbox_8Debugger_6result_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_8Debugger_uresult(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_8Debugger_7uresult_1__get__(o);
}

static int __pyx_setprop_6cptbox_7_cptbox_8Debugger_uresult(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6cptbox_7_cptbox_8Debugger_7uresult_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_8Debugger_arg0(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_8Debugger_4arg0_1__get__(o);
}

static int __pyx_setprop_6cptbox_7_cptbox_8Debugger_arg0(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6cptbox_7_cptbox_8Debugger_4arg0_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_8Debugger_arg1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_8Debugger_4arg1_1__get__(o);
}

static int __pyx_setprop_6cptbox_7_cptbox_8Debugger_arg1(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6cptbox_7_cptbox_8Debugger_4arg1_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_8Debugger_arg2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_8Debugger_4arg2_1__get__(o);
}

static int __pyx_setprop_6cptbox_7_cptbox_8Debugger_arg2(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6cptbox_7_cptbox_8Debugger_4arg2_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_8Debugger_arg3(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_8Debugger_4arg3_1__get__(o);
}

static int __pyx_setprop_6cptbox_7_cptbox_8Debugger_arg3(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6cptbox_7_cptbox_8Debugger_4arg3_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_8Debugger_arg4(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_8Debugger_4arg4_1__get__(o);
}

static int __pyx_setprop_6cptbox_7_cptbox_8Debugger_arg4(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6cptbox_7_cptbox_8Debugger_4arg4_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_8Debugger_arg5(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_8Debugger_4arg5_1__get__(o);
}

static int __pyx_setprop_6cptbox_7_cptbox_8Debugger_arg5(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6cptbox_7_cptbox_8Debugger_4arg5_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_8Debugger_uarg0(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg0_1__get__(o);
}

static int __pyx_setprop_6cptbox_7_cptbox_8Debugger_uarg0(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg0_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_8Debugger_uarg1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg1_1__get__(o);
}

static int __pyx_setprop_6cptbox_7_cptbox_8Debugger_uarg1(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg1_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_8Debugger_uarg2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg2_1__get__(o);
}

static int __pyx_setprop_6cptbox_7_cptbox_8Debugger_uarg2(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg2_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_8Debugger_uarg3(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg3_1__get__(o);
}

static int __pyx_setprop_6cptbox_7_cptbox_8Debugger_uarg3(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg3_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_8Debugger_uarg4(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg4_1__get__(o);
}

static int __pyx_setprop_6cptbox_7_cptbox_8Debugger_uarg4(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg4_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_8Debugger_uarg5(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg5_1__get__(o);
}

static int __pyx_setprop_6cptbox_7_cptbox_8Debugger_uarg5(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6cptbox_7_cptbox_8Debugger_5uarg5_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_8Debugger_pid(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_8Debugger_3pid_1__get__(o);
}

static PyMethodDef __pyx_methods_6cptbox_7_cptbox_Debugger[] = {
  {"readstr", (PyCFunction)__pyx_pw_6cptbox_7_cptbox_8Debugger_1readstr, METH_O, 0},
  {"on_return", (PyCFunction)__pyx_pw_6cptbox_7_cptbox_8Debugger_3on_return, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6cptbox_7_cptbox_Debugger[] = {
  {(char *)"getpid_syscall", __pyx_getprop_6cptbox_7_cptbox_8Debugger_getpid_syscall, 0, 0, 0},
  {(char *)"syscall", __pyx_getprop_6cptbox_7_cptbox_8Debugger_syscall, __pyx_setprop_6cptbox_7_cptbox_8Debugger_syscall, 0, 0},
  {(char *)"result", __pyx_getprop_6cptbox_7_cptbox_8Debugger_result, __pyx_setprop_6cptbox_7_cptbox_8Debugger_result, 0, 0},
  {(char *)"uresult", __pyx_getprop_6cptbox_7_cptbox_8Debugger_uresult, __pyx_setprop_6cptbox_7_cptbox_8Debugger_uresult, 0, 0},
  {(char *)"arg0", __pyx_getprop_6cptbox_7_cptbox_8Debugger_arg0, __pyx_setprop_6cptbox_7_cptbox_8Debugger_arg0, 0, 0},
  {(char *)"arg1", __pyx_getprop_6cptbox_7_cptbox_8Debugger_arg1, __pyx_setprop_6cptbox_7_cptbox_8Debugger_arg1, 0, 0},
  {(char *)"arg2", __pyx_getprop_6cptbox_7_cptbox_8Debugger_arg2, __pyx_setprop_6cptbox_7_cptbox_8Debugger_arg2, 0, 0},
  {(char *)"arg3", __pyx_getprop_6cptbox_7_cptbox_8Debugger_arg3, __pyx_setprop_6cptbox_7_cptbox_8Debugger_arg3, 0, 0},
  {(char *)"arg4", __pyx_getprop_6cptbox_7_cptbox_8Debugger_arg4, __pyx_setprop_6cptbox_7_cptbox_8Debugger_arg4, 0, 0},
  {(char *)"arg5", __pyx_getprop_6cptbox_7_cptbox_8Debugger_arg5, __pyx_setprop_6cptbox_7_cptbox_8Debugger_arg5, 0, 0},
  {(char *)"uarg0", __pyx_getprop_6cptbox_7_cptbox_8Debugger_uarg0, __pyx_setprop_6cptbox_7_cptbox_8Debugger_uarg0, 0, 0},
  {(char *)"uarg1", __pyx_getprop_6cptbox_7_cptbox_8Debugger_uarg1, __pyx_setprop_6cptbox_7_cptbox_8Debugger_uarg1, 0, 0},
  {(char *)"uarg2", __pyx_getprop_6cptbox_7_cptbox_8Debugger_uarg2, __pyx_setprop_6cptbox_7_cptbox_8Debugger_uarg2, 0, 0},
  {(char *)"uarg3", __pyx_getprop_6cptbox_7_cptbox_8Debugger_uarg3, __pyx_setprop_6cptbox_7_cptbox_8Debugger_uarg3, 0, 0},
  {(char *)"uarg4", __pyx_getprop_6cptbox_7_cptbox_8Debugger_uarg4, __pyx_setprop_6cptbox_7_cptbox_8Debugger_uarg4, 0, 0},
  {(char *)"uarg5", __pyx_getprop_6cptbox_7_cptbox_8Debugger_uarg5, __pyx_setprop_6cptbox_7_cptbox_8Debugger_uarg5, 0, 0},
  {(char *)"pid", __pyx_getprop_6cptbox_7_cptbox_8Debugger_pid, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6cptbox_7_cptbox_Debugger = {
  PyVarObject_HEAD_INIT(0, 0)
  "cptbox._cptbox.Debugger", /*tp_name*/
  sizeof(struct __pyx_obj_6cptbox_7_cptbox_Debugger), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6cptbox_7_cptbox_Debugger, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6cptbox_7_cptbox_Debugger, /*tp_traverse*/
  __pyx_tp_clear_6cptbox_7_cptbox_Debugger, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6cptbox_7_cptbox_Debugger, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6cptbox_7_cptbox_Debugger, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6cptbox_7_cptbox_Debugger, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_6cptbox_7_cptbox_Process __pyx_vtable_6cptbox_7_cptbox_Process;

static PyObject *__pyx_tp_new_6cptbox_7_cptbox_Process(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6cptbox_7_cptbox_Process *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6cptbox_7_cptbox_Process *)o);
  p->__pyx_vtab = __pyx_vtabptr_6cptbox_7_cptbox_Process;
  p->debugger = ((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6cptbox_7_cptbox_7Process_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6cptbox_7_cptbox_Process(PyObject *o) {
  struct __pyx_obj_6cptbox_7_cptbox_Process *p = (struct __pyx_obj_6cptbox_7_cptbox_Process *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6cptbox_7_cptbox_7Process_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->debugger);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6cptbox_7_cptbox_Process(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6cptbox_7_cptbox_Process *p = (struct __pyx_obj_6cptbox_7_cptbox_Process *)o;
  if (p->debugger) {
    e = (*v)(((PyObject*)p->debugger), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6cptbox_7_cptbox_Process(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6cptbox_7_cptbox_Process *p = (struct __pyx_obj_6cptbox_7_cptbox_Process *)o;
  tmp = ((PyObject*)p->debugger);
  p->debugger = ((struct __pyx_obj_6cptbox_7_cptbox_Debugger *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_7Process_pid(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_7Process_3pid_1__get__(o);
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_7Process_execution_time(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_7Process_14execution_time_1__get__(o);
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_7Process_cpu_time(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_7Process_8cpu_time_1__get__(o);
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_7Process_max_memory(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_7Process_10max_memory_1__get__(o);
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_7Process_returncode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_7Process_10returncode_1__get__(o);
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_7Process_debugger(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_7Process_8debugger_1__get__(o);
}

static int __pyx_setprop_6cptbox_7_cptbox_7Process_debugger(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6cptbox_7_cptbox_7Process_8debugger_3__set__(o, v);
  }
  else {
    return __pyx_pw_6cptbox_7_cptbox_7Process_8debugger_5__del__(o);
  }
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_7Process__exited(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_7Process_7_exited_1__get__(o);
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_7Process__exitcode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_7Process_9_exitcode_1__get__(o);
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_7Process__child_stdin(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_7Process_12_child_stdin_1__get__(o);
}

static int __pyx_setprop_6cptbox_7_cptbox_7Process__child_stdin(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6cptbox_7_cptbox_7Process_12_child_stdin_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_7Process__child_stdout(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_7Process_13_child_stdout_1__get__(o);
}

static int __pyx_setprop_6cptbox_7_cptbox_7Process__child_stdout(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6cptbox_7_cptbox_7Process_13_child_stdout_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_7Process__child_stderr(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_7Process_13_child_stderr_1__get__(o);
}

static int __pyx_setprop_6cptbox_7_cptbox_7Process__child_stderr(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6cptbox_7_cptbox_7Process_13_child_stderr_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_7Process__child_memory(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_7Process_13_child_memory_1__get__(o);
}

static int __pyx_setprop_6cptbox_7_cptbox_7Process__child_memory(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6cptbox_7_cptbox_7Process_13_child_memory_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_7Process__child_address(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_7Process_14_child_address_1__get__(o);
}

static int __pyx_setprop_6cptbox_7_cptbox_7Process__child_address(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6cptbox_7_cptbox_7Process_14_child_address_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_7Process__cpu_time(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_7Process_9_cpu_time_1__get__(o);
}

static int __pyx_setprop_6cptbox_7_cptbox_7Process__cpu_time(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6cptbox_7_cptbox_7Process_9_cpu_time_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6cptbox_7_cptbox_7Process__nproc(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6cptbox_7_cptbox_7Process_6_nproc_1__get__(o);
}

static int __pyx_setprop_6cptbox_7_cptbox_7Process__nproc(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6cptbox_7_cptbox_7Process_6_nproc_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_6cptbox_7_cptbox_Process[] = {
  {"_callback", (PyCFunction)__pyx_pw_6cptbox_7_cptbox_7Process_5_callback, METH_O, 0},
  {"_handler", (PyCFunction)__pyx_pw_6cptbox_7_cptbox_7Process_7_handler, METH_VARARGS|METH_KEYWORDS, 0},
  {"_protection_fault", (PyCFunction)__pyx_pw_6cptbox_7_cptbox_7Process_9_protection_fault, METH_O, 0},
  {"_cpu_time_exceeded", (PyCFunction)__pyx_pw_6cptbox_7_cptbox_7Process_11_cpu_time_exceeded, METH_NOARGS, 0},
  {"_spawn", (PyCFunction)__pyx_pw_6cptbox_7_cptbox_7Process_13_spawn, METH_VARARGS|METH_KEYWORDS, 0},
  {"_monitor", (PyCFunction)__pyx_pw_6cptbox_7_cptbox_7Process_15_monitor, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6cptbox_7_cptbox_Process[] = {
  {(char *)"pid", __pyx_getprop_6cptbox_7_cptbox_7Process_pid, 0, 0, 0},
  {(char *)"execution_time", __pyx_getprop_6cptbox_7_cptbox_7Process_execution_time, 0, 0, 0},
  {(char *)"cpu_time", __pyx_getprop_6cptbox_7_cptbox_7Process_cpu_time, 0, 0, 0},
  {(char *)"max_memory", __pyx_getprop_6cptbox_7_cptbox_7Process_max_memory, 0, 0, 0},
  {(char *)"returncode", __pyx_getprop_6cptbox_7_cptbox_7Process_returncode, 0, 0, 0},
  {(char *)"debugger", __pyx_getprop_6cptbox_7_cptbox_7Process_debugger, __pyx_setprop_6cptbox_7_cptbox_7Process_debugger, 0, 0},
  {(char *)"_exited", __pyx_getprop_6cptbox_7_cptbox_7Process__exited, 0, 0, 0},
  {(char *)"_exitcode", __pyx_getprop_6cptbox_7_cptbox_7Process__exitcode, 0, 0, 0},
  {(char *)"_child_stdin", __pyx_getprop_6cptbox_7_cptbox_7Process__child_stdin, __pyx_setprop_6cptbox_7_cptbox_7Process__child_stdin, 0, 0},
  {(char *)"_child_stdout", __pyx_getprop_6cptbox_7_cptbox_7Process__child_stdout, __pyx_setprop_6cptbox_7_cptbox_7Process__child_stdout, 0, 0},
  {(char *)"_child_stderr", __pyx_getprop_6cptbox_7_cptbox_7Process__child_stderr, __pyx_setprop_6cptbox_7_cptbox_7Process__child_stderr, 0, 0},
  {(char *)"_child_memory", __pyx_getprop_6cptbox_7_cptbox_7Process__child_memory, __pyx_setprop_6cptbox_7_cptbox_7Process__child_memory, 0, 0},
  {(char *)"_child_address", __pyx_getprop_6cptbox_7_cptbox_7Process__child_address, __pyx_setprop_6cptbox_7_cptbox_7Process__child_address, 0, 0},
  {(char *)"_cpu_time", __pyx_getprop_6cptbox_7_cptbox_7Process__cpu_time, __pyx_setprop_6cptbox_7_cptbox_7Process__cpu_time, 0, 0},
  {(char *)"_nproc", __pyx_getprop_6cptbox_7_cptbox_7Process__nproc, __pyx_setprop_6cptbox_7_cptbox_7Process__nproc, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6cptbox_7_cptbox_Process = {
  PyVarObject_HEAD_INIT(0, 0)
  "cptbox._cptbox.Process", /*tp_name*/
  sizeof(struct __pyx_obj_6cptbox_7_cptbox_Process), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6cptbox_7_cptbox_Process, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6cptbox_7_cptbox_Process, /*tp_traverse*/
  __pyx_tp_clear_6cptbox_7_cptbox_Process, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6cptbox_7_cptbox_Process, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6cptbox_7_cptbox_Process, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6cptbox_7_cptbox_Process, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"get_memory", (PyCFunction)__pyx_pw_6cptbox_7_cptbox_1get_memory, METH_O, 0},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "_cptbox",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_Failed_to_spawn_child, __pyx_k_Failed_to_spawn_child, sizeof(__pyx_k_Failed_to_spawn_child), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_bitness, __pyx_k_Invalid_bitness, sizeof(__pyx_k_Invalid_bitness), 0, 0, 1, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_kp_s_SIGXCPU_in_child, __pyx_k_SIGXCPU_in_child, sizeof(__pyx_k_SIGXCPU_in_child), 0, 0, 1, 0},
  {&__pyx_n_s_SYSCALL_COUNT, __pyx_k_SYSCALL_COUNT, sizeof(__pyx_k_SYSCALL_COUNT), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 1, 0},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_bitness, __pyx_k_bitness, sizeof(__pyx_k_bitness), 0, 0, 1, 1},
  {&__pyx_n_s_callback, __pyx_k_callback, sizeof(__pyx_k_callback), 0, 0, 1, 1},
  {&__pyx_n_s_chdir, __pyx_k_chdir, sizeof(__pyx_k_chdir), 0, 0, 1, 1},
  {&__pyx_n_s_cpu_time_exceeded, __pyx_k_cpu_time_exceeded, sizeof(__pyx_k_cpu_time_exceeded), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_env, __pyx_k_env, sizeof(__pyx_k_env), 0, 0, 1, 1},
  {&__pyx_n_s_fds, __pyx_k_fds, sizeof(__pyx_k_fds), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_handler, __pyx_k_handler, sizeof(__pyx_k_handler), 0, 0, 1, 1},
  {&__pyx_n_s_handler_2, __pyx_k_handler_2, sizeof(__pyx_k_handler_2), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_monitor, __pyx_k_monitor, sizeof(__pyx_k_monitor), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_protection_fault, __pyx_k_protection_fault, sizeof(__pyx_k_protection_fault), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_spawn, __pyx_k_spawn, sizeof(__pyx_k_spawn), 0, 0, 1, 1},
  {&__pyx_n_s_stderr, __pyx_k_stderr, sizeof(__pyx_k_stderr), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_syscall, __pyx_k_syscall, sizeof(__pyx_k_syscall), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "cptbox/_cptbox.pyx":360
 *             self._debugger = new pt_debugger64()
 *         else:
 *             raise ValueError('Invalid bitness')             # <<<<<<<<<<<<<<
 *         self.debugger = Debugger()
 *         self.debugger.thisptr = self._debugger
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_Invalid_bitness); if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "cptbox/_cptbox.pyx":424
 *             if self.process.spawn(pt_child, &config):
 *                 with gil:
 *                     raise RuntimeError('Failed to spawn child')             # <<<<<<<<<<<<<<
 *         free(config.argv)
 *         free(config.envp)
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_Failed_to_spawn_child); if (unlikely(!__pyx_tuple__3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC init_cptbox(void); /*proto*/
PyMODINIT_FUNC init_cptbox(void)
#else
PyMODINIT_FUNC PyInit__cptbox(void); /*proto*/
PyMODINIT_FUNC PyInit__cptbox(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit__cptbox(void)", 0);
  if (__Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_cptbox", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_cptbox___cptbox) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "cptbox._cptbox")) {
      if (unlikely(PyDict_SetItemString(modules, "cptbox._cptbox", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_6cptbox_7_cptbox_Debugger = &__pyx_vtable_6cptbox_7_cptbox_Debugger;
  __pyx_vtable_6cptbox_7_cptbox_Debugger._on_return = (PyObject *(*)(struct __pyx_obj_6cptbox_7_cptbox_Debugger *, int))__pyx_f_6cptbox_7_cptbox_8Debugger__on_return;
  if (PyType_Ready(&__pyx_type_6cptbox_7_cptbox_Debugger) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6cptbox_7_cptbox_Debugger.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_6cptbox_7_cptbox_Debugger.tp_dict, __pyx_vtabptr_6cptbox_7_cptbox_Debugger) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "Debugger", (PyObject *)&__pyx_type_6cptbox_7_cptbox_Debugger) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6cptbox_7_cptbox_Debugger = &__pyx_type_6cptbox_7_cptbox_Debugger;
  __pyx_vtabptr_6cptbox_7_cptbox_Process = &__pyx_vtable_6cptbox_7_cptbox_Process;
  __pyx_vtable_6cptbox_7_cptbox_Process._syscall_handler = (int (*)(struct __pyx_obj_6cptbox_7_cptbox_Process *, int))__pyx_f_6cptbox_7_cptbox_7Process__syscall_handler;
  __pyx_vtable_6cptbox_7_cptbox_Process._event_handler = (int (*)(struct __pyx_obj_6cptbox_7_cptbox_Process *, int, unsigned long))__pyx_f_6cptbox_7_cptbox_7Process__event_handler;
  __pyx_vtable_6cptbox_7_cptbox_Process._handler = (PyObject *(*)(struct __pyx_obj_6cptbox_7_cptbox_Process *, PyObject *, PyObject *, int __pyx_skip_dispatch))__pyx_f_6cptbox_7_cptbox_7Process__handler;
  __pyx_vtable_6cptbox_7_cptbox_Process._protection_fault = (PyObject *(*)(struct __pyx_obj_6cptbox_7_cptbox_Process *, PyObject *, int __pyx_skip_dispatch))__pyx_f_6cptbox_7_cptbox_7Process__protection_fault;
  __pyx_vtable_6cptbox_7_cptbox_Process._cpu_time_exceeded = (PyObject *(*)(struct __pyx_obj_6cptbox_7_cptbox_Process *, int __pyx_skip_dispatch))__pyx_f_6cptbox_7_cptbox_7Process__cpu_time_exceeded;
  __pyx_vtable_6cptbox_7_cptbox_Process._spawn = (PyObject *(*)(struct __pyx_obj_6cptbox_7_cptbox_Process *, PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6cptbox_7_cptbox_7Process__spawn *__pyx_optional_args))__pyx_f_6cptbox_7_cptbox_7Process__spawn;
  __pyx_vtable_6cptbox_7_cptbox_Process._monitor = (PyObject *(*)(struct __pyx_obj_6cptbox_7_cptbox_Process *, int __pyx_skip_dispatch))__pyx_f_6cptbox_7_cptbox_7Process__monitor;
  if (PyType_Ready(&__pyx_type_6cptbox_7_cptbox_Process) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6cptbox_7_cptbox_Process.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_6cptbox_7_cptbox_Process.tp_dict, __pyx_vtabptr_6cptbox_7_cptbox_Process) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "Process", (PyObject *)&__pyx_type_6cptbox_7_cptbox_Process) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6cptbox_7_cptbox_Process = &__pyx_type_6cptbox_7_cptbox_Process;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif

  /* "cptbox/_cptbox.pyx":94
 *     cdef int SIGXCPU
 * 
 * SYSCALL_COUNT = MAX_SYSCALL             # <<<<<<<<<<<<<<
 * 
 * cdef struct child_config:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(MAX_SYSCALL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SYSCALL_COUNT, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cptbox/_cptbox.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * # distutils: sources = ptdebug.cpp, ptdebug32.cpp, ptdebug64.cpp, ptproc.cpp
 * from libc.stdio cimport FILE, fopen, fclose, fgets, sprintf
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init cptbox._cptbox", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init cptbox._cptbox");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#endif
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

static CYTHON_INLINE pid_t __Pyx_PyInt_As_pid_t(PyObject *x) {
    const pid_t neg_one = (pid_t) -1, const_zero = (pid_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(pid_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(pid_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (pid_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (pid_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(pid_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(pid_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(pid_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(pid_t) >= 2 * PyLong_SHIFT) {
                            return (pid_t) (((((pid_t)digits[1]) << PyLong_SHIFT) | (pid_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(pid_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(pid_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(pid_t) >= 3 * PyLong_SHIFT) {
                            return (pid_t) (((((((pid_t)digits[2]) << PyLong_SHIFT) | (pid_t)digits[1]) << PyLong_SHIFT) | (pid_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(pid_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(pid_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(pid_t) >= 4 * PyLong_SHIFT) {
                            return (pid_t) (((((((((pid_t)digits[3]) << PyLong_SHIFT) | (pid_t)digits[2]) << PyLong_SHIFT) | (pid_t)digits[1]) << PyLong_SHIFT) | (pid_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (pid_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(pid_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(pid_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(pid_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(pid_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (pid_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(pid_t, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(pid_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(pid_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(pid_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(pid_t) - 1 > 2 * PyLong_SHIFT) {
                            return (pid_t) (((pid_t)-1)*(((((pid_t)digits[1]) << PyLong_SHIFT) | (pid_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(pid_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(pid_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(pid_t) - 1 > 2 * PyLong_SHIFT) {
                            return (pid_t) ((((((pid_t)digits[1]) << PyLong_SHIFT) | (pid_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(pid_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(pid_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(pid_t) - 1 > 3 * PyLong_SHIFT) {
                            return (pid_t) (((pid_t)-1)*(((((((pid_t)digits[2]) << PyLong_SHIFT) | (pid_t)digits[1]) << PyLong_SHIFT) | (pid_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(pid_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(pid_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(pid_t) - 1 > 3 * PyLong_SHIFT) {
                            return (pid_t) ((((((((pid_t)digits[2]) << PyLong_SHIFT) | (pid_t)digits[1]) << PyLong_SHIFT) | (pid_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(pid_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(pid_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(pid_t) - 1 > 4 * PyLong_SHIFT) {
                            return (pid_t) (((pid_t)-1)*(((((((((pid_t)digits[3]) << PyLong_SHIFT) | (pid_t)digits[2]) << PyLong_SHIFT) | (pid_t)digits[1]) << PyLong_SHIFT) | (pid_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(pid_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(pid_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(pid_t) - 1 > 4 * PyLong_SHIFT) {
                            return (pid_t) ((((((((((pid_t)digits[3]) << PyLong_SHIFT) | (pid_t)digits[2]) << PyLong_SHIFT) | (pid_t)digits[1]) << PyLong_SHIFT) | (pid_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(pid_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(pid_t, long, PyLong_AsLong(x))
            } else if (sizeof(pid_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(pid_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            pid_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (pid_t) -1;
        }
    } else {
        pid_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (pid_t) -1;
        val = __Pyx_PyInt_As_pid_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to pid_t");
    return (pid_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to pid_t");
    return (pid_t) -1;
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_As_unsigned_long(PyObject *x) {
    const unsigned long neg_one = (unsigned long) -1, const_zero = (unsigned long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned long, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) >= 2 * PyLong_SHIFT) {
                            return (unsigned long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) >= 3 * PyLong_SHIFT) {
                            return (unsigned long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) >= 4 * PyLong_SHIFT) {
                            return (unsigned long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(unsigned long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned long, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(unsigned long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned long) (((unsigned long)-1)*(((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned long) ((((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned long) (((unsigned long)-1)*(((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned long) ((((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned long) (((unsigned long)-1)*(((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned long) ((((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, long, PyLong_AsLong(x))
            } else if (sizeof(unsigned long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned long) -1;
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long) -1;
        val = __Pyx_PyInt_As_unsigned_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned long");
    return (unsigned long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned long");
    return (unsigned long) -1;
}

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_long(unsigned long value) {
    const unsigned long neg_one = (unsigned long) -1, const_zero = (unsigned long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(unsigned long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(unsigned long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_pid_t(pid_t value) {
    const pid_t neg_one = (pid_t) -1, const_zero = (pid_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(pid_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(pid_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(pid_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(pid_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(pid_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(pid_t),
                                     little, !is_unsigned);
    }
}

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
